
CDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800806c  0800806c  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  0800806c  0800806c  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800806c  0800806c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800806c  0800806c  0001806c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008070  08008070  00018070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08008074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000870  20000164  080081d8  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  080081d8  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d3f6  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd4  00000000  00000000  0002d5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb0  00000000  00000000  000302a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089a  00000000  00000000  00030e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019803  00000000  00000000  000316ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb4b  00000000  00000000  0004aeed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089551  00000000  00000000  0005aa38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d7c  00000000  00000000  000e3f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e6d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08007fe8 	.word	0x08007fe8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08007fe8 	.word	0x08007fe8

0800014c <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
long map(long x, long in_min ,long in_max ,long out_min ,long out_max)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
 8000158:	603b      	str	r3, [r7, #0]
	long value;
	value = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800015a:	68fa      	ldr	r2, [r7, #12]
 800015c:	68bb      	ldr	r3, [r7, #8]
 800015e:	1ad3      	subs	r3, r2, r3
 8000160:	6a39      	ldr	r1, [r7, #32]
 8000162:	683a      	ldr	r2, [r7, #0]
 8000164:	1a8a      	subs	r2, r1, r2
 8000166:	fb03 f202 	mul.w	r2, r3, r2
 800016a:	6879      	ldr	r1, [r7, #4]
 800016c:	68bb      	ldr	r3, [r7, #8]
 800016e:	1acb      	subs	r3, r1, r3
 8000170:	fb92 f3f3 	sdiv	r3, r2, r3
 8000174:	683a      	ldr	r2, [r7, #0]
 8000176:	4413      	add	r3, r2
 8000178:	617b      	str	r3, [r7, #20]
	return value;
 800017a:	697b      	ldr	r3, [r7, #20]
}
 800017c:	4618      	mov	r0, r3
 800017e:	371c      	adds	r7, #28
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
	...

08000188 <Mouse_GetAction>:


void Mouse_GetAction(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b084      	sub	sp, #16
 800018c:	af02      	add	r7, sp, #8
	static uint8_t button = 0 ;
	int8_t XPos,YPos = 0 ;
 800018e:	2300      	movs	r3, #0
 8000190:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(LeftButton_GPIO_Port,LeftButton_Pin) == 0)
 8000192:	2104      	movs	r1, #4
 8000194:	481e      	ldr	r0, [pc, #120]	; (8000210 <Mouse_GetAction+0x88>)
 8000196:	f001 fb55 	bl	8001844 <HAL_GPIO_ReadPin>
 800019a:	4603      	mov	r3, r0
 800019c:	2b00      	cmp	r3, #0
 800019e:	d103      	bne.n	80001a8 <Mouse_GetAction+0x20>
	{
		button = 1;
 80001a0:	4b1c      	ldr	r3, [pc, #112]	; (8000214 <Mouse_GetAction+0x8c>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
 80001a6:	e002      	b.n	80001ae <Mouse_GetAction+0x26>
	}
	else
	{
		button = 0;
 80001a8:	4b1a      	ldr	r3, [pc, #104]	; (8000214 <Mouse_GetAction+0x8c>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	701a      	strb	r2, [r3, #0]
	}
	XPos = map(ADC_val[0],0,4096,-10,10);
 80001ae:	4b1a      	ldr	r3, [pc, #104]	; (8000218 <Mouse_GetAction+0x90>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	4618      	mov	r0, r3
 80001b4:	230a      	movs	r3, #10
 80001b6:	9300      	str	r3, [sp, #0]
 80001b8:	f06f 0309 	mvn.w	r3, #9
 80001bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001c0:	2100      	movs	r1, #0
 80001c2:	f7ff ffc3 	bl	800014c <map>
 80001c6:	4603      	mov	r3, r0
 80001c8:	71bb      	strb	r3, [r7, #6]
	YPos = map(ADC_val[1],0,4096,-10,10);
 80001ca:	4b13      	ldr	r3, [pc, #76]	; (8000218 <Mouse_GetAction+0x90>)
 80001cc:	885b      	ldrh	r3, [r3, #2]
 80001ce:	4618      	mov	r0, r3
 80001d0:	230a      	movs	r3, #10
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	f06f 0309 	mvn.w	r3, #9
 80001d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001dc:	2100      	movs	r1, #0
 80001de:	f7ff ffb5 	bl	800014c <map>
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]

	mouse_report[0] = button;
 80001e6:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <Mouse_GetAction+0x8c>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	b25a      	sxtb	r2, r3
 80001ec:	4b0b      	ldr	r3, [pc, #44]	; (800021c <Mouse_GetAction+0x94>)
 80001ee:	701a      	strb	r2, [r3, #0]
	mouse_report[1] = XPos;
 80001f0:	4a0a      	ldr	r2, [pc, #40]	; (800021c <Mouse_GetAction+0x94>)
 80001f2:	79bb      	ldrb	r3, [r7, #6]
 80001f4:	7053      	strb	r3, [r2, #1]
	mouse_report[2] = YPos;
 80001f6:	4a09      	ldr	r2, [pc, #36]	; (800021c <Mouse_GetAction+0x94>)
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	7093      	strb	r3, [r2, #2]
	mouse_report[3] = 0;
 80001fc:	4b07      	ldr	r3, [pc, #28]	; (800021c <Mouse_GetAction+0x94>)
 80001fe:	2200      	movs	r2, #0
 8000200:	70da      	strb	r2, [r3, #3]
	mouse_report[4] = 0;
 8000202:	4b06      	ldr	r3, [pc, #24]	; (800021c <Mouse_GetAction+0x94>)
 8000204:	2200      	movs	r2, #0
 8000206:	711a      	strb	r2, [r3, #4]
}
 8000208:	bf00      	nop
 800020a:	3708      	adds	r7, #8
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40010800 	.word	0x40010800
 8000214:	20000200 	.word	0x20000200
 8000218:	20000188 	.word	0x20000188
 800021c:	20000180 	.word	0x20000180

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa60 	bl	80006e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f834 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8fc 	bl	8000428 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f8dc 	bl	80003ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000234:	f000 f88c 	bl	8000350 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000238:	f007 faf0 	bl	800781c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)ADC_val,2);
 800023c:	2202      	movs	r2, #2
 800023e:	4910      	ldr	r1, [pc, #64]	; (8000280 <main+0x60>)
 8000240:	4810      	ldr	r0, [pc, #64]	; (8000284 <main+0x64>)
 8000242:	f000 fb8b 	bl	800095c <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Mouse_GetAction();
 8000246:	f7ff ff9f 	bl	8000188 <Mouse_GetAction>
	USBD_HID_SendReport(&hUsbDeviceFS,(uint8_t*)mouse_report,5);
 800024a:	2205      	movs	r2, #5
 800024c:	490e      	ldr	r1, [pc, #56]	; (8000288 <main+0x68>)
 800024e:	480f      	ldr	r0, [pc, #60]	; (800028c <main+0x6c>)
 8000250:	f006 f9f4 	bl	800663c <USBD_HID_SendReport>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,1);
 8000254:	2201      	movs	r2, #1
 8000256:	2101      	movs	r1, #1
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <main+0x70>)
 800025a:	f001 fb0a 	bl	8001872 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,1);
 800025e:	2201      	movs	r2, #1
 8000260:	2102      	movs	r1, #2
 8000262:	480b      	ldr	r0, [pc, #44]	; (8000290 <main+0x70>)
 8000264:	f001 fb05 	bl	8001872 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,1);
 8000268:	2201      	movs	r2, #1
 800026a:	2110      	movs	r1, #16
 800026c:	4808      	ldr	r0, [pc, #32]	; (8000290 <main+0x70>)
 800026e:	f001 fb00 	bl	8001872 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,1);
 8000272:	2201      	movs	r2, #1
 8000274:	2120      	movs	r1, #32
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <main+0x70>)
 8000278:	f001 fafb 	bl	8001872 <HAL_GPIO_WritePin>
	Mouse_GetAction();
 800027c:	e7e3      	b.n	8000246 <main+0x26>
 800027e:	bf00      	nop
 8000280:	20000188 	.word	0x20000188
 8000284:	2000018c 	.word	0x2000018c
 8000288:	20000180 	.word	0x20000180
 800028c:	2000020c 	.word	0x2000020c
 8000290:	40010c00 	.word	0x40010c00

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b094      	sub	sp, #80	; 0x50
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800029e:	2228      	movs	r2, #40	; 0x28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f007 fe74 	bl	8007f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	f107 0314 	add.w	r3, r7, #20
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c4:	2301      	movs	r3, #1
 80002c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 f830 	bl	8003350 <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002f6:	f000 f8ef 	bl	80004d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	2302      	movs	r3, #2
 8000300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000310:	f107 0314 	add.w	r3, r7, #20
 8000314:	2101      	movs	r1, #1
 8000316:	4618      	mov	r0, r3
 8000318:	f003 fa9c 	bl	8003854 <HAL_RCC_ClockConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000322:	f000 f8d9 	bl	80004d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000326:	2312      	movs	r3, #18
 8000328:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 800032a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800032e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000330:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000334:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4618      	mov	r0, r3
 800033a:	f003 fbe7 	bl	8003b0c <HAL_RCCEx_PeriphCLKConfig>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000344:	f000 f8c8 	bl	80004d8 <Error_Handler>
  }
}
 8000348:	bf00      	nop
 800034a:	3750      	adds	r7, #80	; 0x50
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <MX_ADC1_Init+0x94>)
 8000362:	4a21      	ldr	r2, [pc, #132]	; (80003e8 <MX_ADC1_Init+0x98>)
 8000364:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <MX_ADC1_Init+0x94>)
 8000368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800036c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800036e:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <MX_ADC1_Init+0x94>)
 8000370:	2201      	movs	r2, #1
 8000372:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_ADC1_Init+0x94>)
 8000376:	2200      	movs	r2, #0
 8000378:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037a:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <MX_ADC1_Init+0x94>)
 800037c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000380:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000382:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_ADC1_Init+0x94>)
 8000384:	2200      	movs	r2, #0
 8000386:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <MX_ADC1_Init+0x94>)
 800038a:	2202      	movs	r2, #2
 800038c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800038e:	4815      	ldr	r0, [pc, #84]	; (80003e4 <MX_ADC1_Init+0x94>)
 8000390:	f000 fa0c 	bl	80007ac <HAL_ADC_Init>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800039a:	f000 f89d 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800039e:	2300      	movs	r3, #0
 80003a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80003a6:	2307      	movs	r3, #7
 80003a8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	4619      	mov	r1, r3
 80003ae:	480d      	ldr	r0, [pc, #52]	; (80003e4 <MX_ADC1_Init+0x94>)
 80003b0:	f000 fbce 	bl	8000b50 <HAL_ADC_ConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80003ba:	f000 f88d 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003be:	2301      	movs	r3, #1
 80003c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003c2:	2302      	movs	r3, #2
 80003c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4619      	mov	r1, r3
 80003ca:	4806      	ldr	r0, [pc, #24]	; (80003e4 <MX_ADC1_Init+0x94>)
 80003cc:	f000 fbc0 	bl	8000b50 <HAL_ADC_ConfigChannel>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80003d6:	f000 f87f 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	3710      	adds	r7, #16
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	2000018c 	.word	0x2000018c
 80003e8:	40012400 	.word	0x40012400

080003ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_DMA_Init+0x38>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <MX_DMA_Init+0x38>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6153      	str	r3, [r2, #20]
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_DMA_Init+0x38>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	200b      	movs	r0, #11
 8000410:	f000 fe6f 	bl	80010f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000414:	200b      	movs	r0, #11
 8000416:	f000 fe88 	bl	800112a <HAL_NVIC_EnableIRQ>

}
 800041a:	bf00      	nop
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000

08000428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	2200      	movs	r2, #0
 8000434:	601a      	str	r2, [r3, #0]
 8000436:	605a      	str	r2, [r3, #4]
 8000438:	609a      	str	r2, [r3, #8]
 800043a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800043c:	4b23      	ldr	r3, [pc, #140]	; (80004cc <MX_GPIO_Init+0xa4>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a22      	ldr	r2, [pc, #136]	; (80004cc <MX_GPIO_Init+0xa4>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b20      	ldr	r3, [pc, #128]	; (80004cc <MX_GPIO_Init+0xa4>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0320 	and.w	r3, r3, #32
 8000450:	60fb      	str	r3, [r7, #12]
 8000452:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b1d      	ldr	r3, [pc, #116]	; (80004cc <MX_GPIO_Init+0xa4>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a1c      	ldr	r2, [pc, #112]	; (80004cc <MX_GPIO_Init+0xa4>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <MX_GPIO_Init+0xa4>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <MX_GPIO_Init+0xa4>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a16      	ldr	r2, [pc, #88]	; (80004cc <MX_GPIO_Init+0xa4>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <MX_GPIO_Init+0xa4>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	607b      	str	r3, [r7, #4]
 8000482:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2133      	movs	r1, #51	; 0x33
 8000488:	4811      	ldr	r0, [pc, #68]	; (80004d0 <MX_GPIO_Init+0xa8>)
 800048a:	f001 f9f2 	bl	8001872 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LeftButton_Pin */
  GPIO_InitStruct.Pin = LeftButton_Pin;
 800048e:	2304      	movs	r3, #4
 8000490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000492:	2300      	movs	r3, #0
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000496:	2301      	movs	r3, #1
 8000498:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LeftButton_GPIO_Port, &GPIO_InitStruct);
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	480c      	ldr	r0, [pc, #48]	; (80004d4 <MX_GPIO_Init+0xac>)
 80004a2:	f001 f84b 	bl	800153c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80004a6:	2333      	movs	r3, #51	; 0x33
 80004a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004aa:	2301      	movs	r3, #1
 80004ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b6:	f107 0310 	add.w	r3, r7, #16
 80004ba:	4619      	mov	r1, r3
 80004bc:	4804      	ldr	r0, [pc, #16]	; (80004d0 <MX_GPIO_Init+0xa8>)
 80004be:	f001 f83d 	bl	800153c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c2:	bf00      	nop
 80004c4:	3720      	adds	r7, #32
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40010800 	.word	0x40010800

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <Error_Handler+0x8>
	...

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_MspInit+0x5c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <HAL_MspInit+0x5c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_MspInit+0x5c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_MspInit+0x5c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_MspInit+0x5c>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_MspInit+0x5c>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_MspInit+0x60>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <HAL_MspInit+0x60>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000
 8000544:	40010000 	.word	0x40010000

08000548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b088      	sub	sp, #32
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a28      	ldr	r2, [pc, #160]	; (8000604 <HAL_ADC_MspInit+0xbc>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d149      	bne.n	80005fc <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <HAL_ADC_MspInit+0xc0>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a26      	ldr	r2, [pc, #152]	; (8000608 <HAL_ADC_MspInit+0xc0>)
 800056e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b24      	ldr	r3, [pc, #144]	; (8000608 <HAL_ADC_MspInit+0xc0>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b21      	ldr	r3, [pc, #132]	; (8000608 <HAL_ADC_MspInit+0xc0>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <HAL_ADC_MspInit+0xc0>)
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <HAL_ADC_MspInit+0xc0>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0304 	and.w	r3, r3, #4
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000598:	2303      	movs	r3, #3
 800059a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800059c:	2303      	movs	r3, #3
 800059e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	4619      	mov	r1, r3
 80005a6:	4819      	ldr	r0, [pc, #100]	; (800060c <HAL_ADC_MspInit+0xc4>)
 80005a8:	f000 ffc8 	bl	800153c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005ae:	4a19      	ldr	r2, [pc, #100]	; (8000614 <HAL_ADC_MspInit+0xcc>)
 80005b0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005c0:	2280      	movs	r2, #128	; 0x80
 80005c2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005cc:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005d2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005d6:	2220      	movs	r2, #32
 80005d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005e2:	f000 fdbd 	bl	8001160 <HAL_DMA_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80005ec:	f7ff ff74 	bl	80004d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005f4:	621a      	str	r2, [r3, #32]
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_ADC_MspInit+0xc8>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005fc:	bf00      	nop
 80005fe:	3720      	adds	r7, #32
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40012400 	.word	0x40012400
 8000608:	40021000 	.word	0x40021000
 800060c:	40010800 	.word	0x40010800
 8000610:	200001bc 	.word	0x200001bc
 8000614:	40020008 	.word	0x40020008

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800065e:	f000 f889 	bl	8000774 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <DMA1_Channel1_IRQHandler+0x10>)
 800066e:	f000 fe31 	bl	80012d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200001bc 	.word	0x200001bc

0800067c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000680:	4802      	ldr	r0, [pc, #8]	; (800068c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000682:	f001 fa33 	bl	8001aec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200006d0 	.word	0x200006d0

08000690 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800069c:	f7ff fff8 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006a2:	490c      	ldr	r1, [pc, #48]	; (80006d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006a4:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a09      	ldr	r2, [pc, #36]	; (80006dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006b8:	4c09      	ldr	r4, [pc, #36]	; (80006e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c6:	f007 fc6b 	bl	8007fa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff fda9 	bl	8000220 <main>
  bx lr
 80006ce:	4770      	bx	lr
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 80006d8:	08008074 	.word	0x08008074
  ldr r2, =_sbss
 80006dc:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 80006e0:	200009d4 	.word	0x200009d4

080006e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC1_2_IRQHandler>
	...

080006e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_Init+0x28>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_Init+0x28>)
 80006f2:	f043 0310 	orr.w	r3, r3, #16
 80006f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006f8:	2003      	movs	r0, #3
 80006fa:	f000 fcef 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006fe:	200f      	movs	r0, #15
 8000700:	f000 f808 	bl	8000714 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000704:	f7ff feee 	bl	80004e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40022000 	.word	0x40022000

08000714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071c:	4b12      	ldr	r3, [pc, #72]	; (8000768 <HAL_InitTick+0x54>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_InitTick+0x58>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb3 f3f1 	udiv	r3, r3, r1
 800072e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000732:	4618      	mov	r0, r3
 8000734:	f000 fd07 	bl	8001146 <HAL_SYSTICK_Config>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800073e:	2301      	movs	r3, #1
 8000740:	e00e      	b.n	8000760 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d80a      	bhi.n	800075e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f000 fccf 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000754:	4a06      	ldr	r2, [pc, #24]	; (8000770 <HAL_InitTick+0x5c>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800075a:	2300      	movs	r3, #0
 800075c:	e000      	b.n	8000760 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000000 	.word	0x20000000
 800076c:	20000008 	.word	0x20000008
 8000770:	20000004 	.word	0x20000004

08000774 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_IncTick+0x1c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_IncTick+0x20>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a03      	ldr	r2, [pc, #12]	; (8000794 <HAL_IncTick+0x20>)
 8000786:	6013      	str	r3, [r2, #0]
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	20000008 	.word	0x20000008
 8000794:	20000204 	.word	0x20000204

08000798 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  return uwTick;
 800079c:	4b02      	ldr	r3, [pc, #8]	; (80007a8 <HAL_GetTick+0x10>)
 800079e:	681b      	ldr	r3, [r3, #0]
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	20000204 	.word	0x20000204

080007ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b086      	sub	sp, #24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007b4:	2300      	movs	r3, #0
 80007b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d101      	bne.n	80007ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e0be      	b.n	800094c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689b      	ldr	r3, [r3, #8]
 80007d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d109      	bne.n	80007f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff feac 	bl	8000548 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 faff 	bl	8000df4 <ADC_ConversionStop_Disable>
 80007f6:	4603      	mov	r3, r0
 80007f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fe:	f003 0310 	and.w	r3, r3, #16
 8000802:	2b00      	cmp	r3, #0
 8000804:	f040 8099 	bne.w	800093a <HAL_ADC_Init+0x18e>
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	2b00      	cmp	r3, #0
 800080c:	f040 8095 	bne.w	800093a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000814:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000818:	f023 0302 	bic.w	r3, r3, #2
 800081c:	f043 0202 	orr.w	r2, r3, #2
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800082c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7b1b      	ldrb	r3, [r3, #12]
 8000832:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000834:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000836:	68ba      	ldr	r2, [r7, #8]
 8000838:	4313      	orrs	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000844:	d003      	beq.n	800084e <HAL_ADC_Init+0xa2>
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d102      	bne.n	8000854 <HAL_ADC_Init+0xa8>
 800084e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000852:	e000      	b.n	8000856 <HAL_ADC_Init+0xaa>
 8000854:	2300      	movs	r3, #0
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4313      	orrs	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7d1b      	ldrb	r3, [r3, #20]
 8000860:	2b01      	cmp	r3, #1
 8000862:	d119      	bne.n	8000898 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	7b1b      	ldrb	r3, [r3, #12]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d109      	bne.n	8000880 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	3b01      	subs	r3, #1
 8000872:	035a      	lsls	r2, r3, #13
 8000874:	693b      	ldr	r3, [r7, #16]
 8000876:	4313      	orrs	r3, r2
 8000878:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	e00b      	b.n	8000898 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000884:	f043 0220 	orr.w	r2, r3, #32
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000890:	f043 0201 	orr.w	r2, r3, #1
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	430a      	orrs	r2, r1
 80008aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <HAL_ADC_Init+0x1a8>)
 80008b4:	4013      	ands	r3, r2
 80008b6:	687a      	ldr	r2, [r7, #4]
 80008b8:	6812      	ldr	r2, [r2, #0]
 80008ba:	68b9      	ldr	r1, [r7, #8]
 80008bc:	430b      	orrs	r3, r1
 80008be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008c8:	d003      	beq.n	80008d2 <HAL_ADC_Init+0x126>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d104      	bne.n	80008dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	051b      	lsls	r3, r3, #20
 80008da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	689a      	ldr	r2, [r3, #8]
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_ADC_Init+0x1ac>)
 80008f8:	4013      	ands	r3, r2
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d10b      	bne.n	8000918 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800090a:	f023 0303 	bic.w	r3, r3, #3
 800090e:	f043 0201 	orr.w	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000916:	e018      	b.n	800094a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091c:	f023 0312 	bic.w	r3, r3, #18
 8000920:	f043 0210 	orr.w	r2, r3, #16
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092c:	f043 0201 	orr.w	r2, r3, #1
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000934:	2301      	movs	r3, #1
 8000936:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000938:	e007      	b.n	800094a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093e:	f043 0210 	orr.w	r2, r3, #16
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800094a:	7dfb      	ldrb	r3, [r7, #23]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	ffe1f7fd 	.word	0xffe1f7fd
 8000958:	ff1f0efe 	.word	0xff1f0efe

0800095c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a64      	ldr	r2, [pc, #400]	; (8000b04 <HAL_ADC_Start_DMA+0x1a8>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d004      	beq.n	8000980 <HAL_ADC_Start_DMA+0x24>
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a63      	ldr	r2, [pc, #396]	; (8000b08 <HAL_ADC_Start_DMA+0x1ac>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d106      	bne.n	800098e <HAL_ADC_Start_DMA+0x32>
 8000980:	4b60      	ldr	r3, [pc, #384]	; (8000b04 <HAL_ADC_Start_DMA+0x1a8>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000988:	2b00      	cmp	r3, #0
 800098a:	f040 80b3 	bne.w	8000af4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000994:	2b01      	cmp	r3, #1
 8000996:	d101      	bne.n	800099c <HAL_ADC_Start_DMA+0x40>
 8000998:	2302      	movs	r3, #2
 800099a:	e0ae      	b.n	8000afa <HAL_ADC_Start_DMA+0x19e>
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2201      	movs	r2, #1
 80009a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f000 f9cb 	bl	8000d40 <ADC_Enable>
 80009aa:	4603      	mov	r3, r0
 80009ac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	f040 809a 	bne.w	8000aea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80009be:	f023 0301 	bic.w	r3, r3, #1
 80009c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a4e      	ldr	r2, [pc, #312]	; (8000b08 <HAL_ADC_Start_DMA+0x1ac>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d105      	bne.n	80009e0 <HAL_ADC_Start_DMA+0x84>
 80009d4:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <HAL_ADC_Start_DMA+0x1a8>)
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d115      	bne.n	8000a0c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d026      	beq.n	8000a48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a0a:	e01d      	b.n	8000a48 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a10:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a39      	ldr	r2, [pc, #228]	; (8000b04 <HAL_ADC_Start_DMA+0x1a8>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d004      	beq.n	8000a2c <HAL_ADC_Start_DMA+0xd0>
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a38      	ldr	r2, [pc, #224]	; (8000b08 <HAL_ADC_Start_DMA+0x1ac>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d10d      	bne.n	8000a48 <HAL_ADC_Start_DMA+0xec>
 8000a2c:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <HAL_ADC_Start_DMA+0x1a8>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d007      	beq.n	8000a48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d006      	beq.n	8000a62 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a58:	f023 0206 	bic.w	r2, r3, #6
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a60:	e002      	b.n	8000a68 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2200      	movs	r2, #0
 8000a66:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	4a25      	ldr	r2, [pc, #148]	; (8000b0c <HAL_ADC_Start_DMA+0x1b0>)
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6a1b      	ldr	r3, [r3, #32]
 8000a7c:	4a24      	ldr	r2, [pc, #144]	; (8000b10 <HAL_ADC_Start_DMA+0x1b4>)
 8000a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <HAL_ADC_Start_DMA+0x1b8>)
 8000a86:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f06f 0202 	mvn.w	r2, #2
 8000a90:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	689a      	ldr	r2, [r3, #8]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000aa0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	6a18      	ldr	r0, [r3, #32]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	334c      	adds	r3, #76	; 0x4c
 8000aac:	4619      	mov	r1, r3
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f000 fbaf 	bl	8001214 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ac0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ac4:	d108      	bne.n	8000ad8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ad4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ad6:	e00f      	b.n	8000af8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ae6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ae8:	e006      	b.n	8000af8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000af2:	e001      	b.n	8000af8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3718      	adds	r7, #24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40012400 	.word	0x40012400
 8000b08:	40012800 	.word	0x40012800
 8000b0c:	08000e77 	.word	0x08000e77
 8000b10:	08000ef3 	.word	0x08000ef3
 8000b14:	08000f0f 	.word	0x08000f0f

08000b18 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
	...

08000b50 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d101      	bne.n	8000b70 <HAL_ADC_ConfigChannel+0x20>
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	e0dc      	b.n	8000d2a <HAL_ADC_ConfigChannel+0x1da>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	2b06      	cmp	r3, #6
 8000b7e:	d81c      	bhi.n	8000bba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	3b05      	subs	r3, #5
 8000b92:	221f      	movs	r2, #31
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	4019      	ands	r1, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	4413      	add	r3, r2
 8000baa:	3b05      	subs	r3, #5
 8000bac:	fa00 f203 	lsl.w	r2, r0, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	430a      	orrs	r2, r1
 8000bb6:	635a      	str	r2, [r3, #52]	; 0x34
 8000bb8:	e03c      	b.n	8000c34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	2b0c      	cmp	r3, #12
 8000bc0:	d81c      	bhi.n	8000bfc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685a      	ldr	r2, [r3, #4]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	3b23      	subs	r3, #35	; 0x23
 8000bd4:	221f      	movs	r2, #31
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	4019      	ands	r1, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	3b23      	subs	r3, #35	; 0x23
 8000bee:	fa00 f203 	lsl.w	r2, r0, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	631a      	str	r2, [r3, #48]	; 0x30
 8000bfa:	e01b      	b.n	8000c34 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	4613      	mov	r3, r2
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	3b41      	subs	r3, #65	; 0x41
 8000c0e:	221f      	movs	r2, #31
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	4019      	ands	r1, r3
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	4613      	mov	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	4413      	add	r3, r2
 8000c26:	3b41      	subs	r3, #65	; 0x41
 8000c28:	fa00 f203 	lsl.w	r2, r0, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	430a      	orrs	r2, r1
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b09      	cmp	r3, #9
 8000c3a:	d91c      	bls.n	8000c76 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68d9      	ldr	r1, [r3, #12]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	3b1e      	subs	r3, #30
 8000c4e:	2207      	movs	r2, #7
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	4019      	ands	r1, r3
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	6898      	ldr	r0, [r3, #8]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	3b1e      	subs	r3, #30
 8000c68:	fa00 f203 	lsl.w	r2, r0, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	e019      	b.n	8000caa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6919      	ldr	r1, [r3, #16]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4613      	mov	r3, r2
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	4413      	add	r3, r2
 8000c86:	2207      	movs	r2, #7
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4019      	ands	r1, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	6898      	ldr	r0, [r3, #8]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2b10      	cmp	r3, #16
 8000cb0:	d003      	beq.n	8000cba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cb6:	2b11      	cmp	r3, #17
 8000cb8:	d132      	bne.n	8000d20 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1d      	ldr	r2, [pc, #116]	; (8000d34 <HAL_ADC_ConfigChannel+0x1e4>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d125      	bne.n	8000d10 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d126      	bne.n	8000d20 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000ce0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b10      	cmp	r3, #16
 8000ce8:	d11a      	bne.n	8000d20 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <HAL_ADC_ConfigChannel+0x1e8>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a13      	ldr	r2, [pc, #76]	; (8000d3c <HAL_ADC_ConfigChannel+0x1ec>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	0c9a      	lsrs	r2, r3, #18
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d00:	e002      	b.n	8000d08 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	3b01      	subs	r3, #1
 8000d06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f9      	bne.n	8000d02 <HAL_ADC_ConfigChannel+0x1b2>
 8000d0e:	e007      	b.n	8000d20 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d14:	f043 0220 	orr.w	r2, r3, #32
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3714      	adds	r7, #20
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	40012400 	.word	0x40012400
 8000d38:	20000000 	.word	0x20000000
 8000d3c:	431bde83 	.word	0x431bde83

08000d40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d040      	beq.n	8000de0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f042 0201 	orr.w	r2, r2, #1
 8000d6c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d6e:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <ADC_Enable+0xac>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <ADC_Enable+0xb0>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	0c9b      	lsrs	r3, r3, #18
 8000d7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d7c:	e002      	b.n	8000d84 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	3b01      	subs	r3, #1
 8000d82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f9      	bne.n	8000d7e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000d8a:	f7ff fd05 	bl	8000798 <HAL_GetTick>
 8000d8e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000d90:	e01f      	b.n	8000dd2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000d92:	f7ff fd01 	bl	8000798 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	2b02      	cmp	r3, #2
 8000d9e:	d918      	bls.n	8000dd2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d011      	beq.n	8000dd2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	f043 0210 	orr.w	r2, r3, #16
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbe:	f043 0201 	orr.w	r2, r3, #1
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e007      	b.n	8000de2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d1d8      	bne.n	8000d92 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000000 	.word	0x20000000
 8000df0:	431bde83 	.word	0x431bde83

08000df4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d12e      	bne.n	8000e6c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0201 	bic.w	r2, r2, #1
 8000e1c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e1e:	f7ff fcbb 	bl	8000798 <HAL_GetTick>
 8000e22:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e24:	e01b      	b.n	8000e5e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e26:	f7ff fcb7 	bl	8000798 <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d914      	bls.n	8000e5e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d10d      	bne.n	8000e5e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f043 0210 	orr.w	r2, r3, #16
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	f043 0201 	orr.w	r2, r3, #1
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e007      	b.n	8000e6e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d0dc      	beq.n	8000e26 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d127      	bne.n	8000ee0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ea6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eaa:	d115      	bne.n	8000ed8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d111      	bne.n	8000ed8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ec4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d105      	bne.n	8000ed8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed0:	f043 0201 	orr.w	r2, r3, #1
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f7ff fe1d 	bl	8000b18 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000ede:	e004      	b.n	8000eea <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	4798      	blx	r3
}
 8000eea:	bf00      	nop
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000f00:	68f8      	ldr	r0, [r7, #12]
 8000f02:	f7ff fe12 	bl	8000b2a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f20:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2c:	f043 0204 	orr.w	r2, r3, #4
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff fe01 	bl	8000b3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000f3a:	bf00      	nop
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	db0b      	blt.n	8000fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	f003 021f 	and.w	r2, r3, #31
 8000fc0:	4906      	ldr	r1, [pc, #24]	; (8000fdc <__NVIC_EnableIRQ+0x34>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	095b      	lsrs	r3, r3, #5
 8000fc8:	2001      	movs	r0, #1
 8000fca:	fa00 f202 	lsl.w	r2, r0, r2
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	; (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	; (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	; 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff90 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff2d 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff42 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff90 	bl	8001034 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5f 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff35 	bl	8000fa8 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e043      	b.n	80011fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <HAL_DMA_Init+0xa8>)
 800117e:	4413      	add	r3, r2
 8001180:	4a22      	ldr	r2, [pc, #136]	; (800120c <HAL_DMA_Init+0xac>)
 8001182:	fba2 2303 	umull	r2, r3, r2, r3
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	009a      	lsls	r2, r3, #2
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <HAL_DMA_Init+0xb0>)
 8001192:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2202      	movs	r2, #2
 8001198:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2201      	movs	r2, #1
 80011f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	bffdfff8 	.word	0xbffdfff8
 800120c:	cccccccd 	.word	0xcccccccd
 8001210:	40020000 	.word	0x40020000

08001214 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_DMA_Start_IT+0x20>
 8001230:	2302      	movs	r3, #2
 8001232:	e04b      	b.n	80012cc <HAL_DMA_Start_IT+0xb8>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2201      	movs	r2, #1
 8001238:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b01      	cmp	r3, #1
 8001246:	d13a      	bne.n	80012be <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2202      	movs	r2, #2
 800124c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 0201 	bic.w	r2, r2, #1
 8001264:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f000 f937 	bl	80014e0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	2b00      	cmp	r3, #0
 8001278:	d008      	beq.n	800128c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 020e 	orr.w	r2, r2, #14
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e00f      	b.n	80012ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f022 0204 	bic.w	r2, r2, #4
 800129a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 020a 	orr.w	r2, r2, #10
 80012aa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	e005      	b.n	80012ca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012c6:	2302      	movs	r3, #2
 80012c8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	2204      	movs	r2, #4
 80012f2:	409a      	lsls	r2, r3
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	4013      	ands	r3, r2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d04f      	beq.n	800139c <HAL_DMA_IRQHandler+0xc8>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	2b00      	cmp	r3, #0
 8001304:	d04a      	beq.n	800139c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	2b00      	cmp	r3, #0
 8001312:	d107      	bne.n	8001324 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0204 	bic.w	r2, r2, #4
 8001322:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a66      	ldr	r2, [pc, #408]	; (80014c4 <HAL_DMA_IRQHandler+0x1f0>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d029      	beq.n	8001382 <HAL_DMA_IRQHandler+0xae>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a65      	ldr	r2, [pc, #404]	; (80014c8 <HAL_DMA_IRQHandler+0x1f4>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d022      	beq.n	800137e <HAL_DMA_IRQHandler+0xaa>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a63      	ldr	r2, [pc, #396]	; (80014cc <HAL_DMA_IRQHandler+0x1f8>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d01a      	beq.n	8001378 <HAL_DMA_IRQHandler+0xa4>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a62      	ldr	r2, [pc, #392]	; (80014d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d012      	beq.n	8001372 <HAL_DMA_IRQHandler+0x9e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a60      	ldr	r2, [pc, #384]	; (80014d4 <HAL_DMA_IRQHandler+0x200>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00a      	beq.n	800136c <HAL_DMA_IRQHandler+0x98>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <HAL_DMA_IRQHandler+0x204>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d102      	bne.n	8001366 <HAL_DMA_IRQHandler+0x92>
 8001360:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001364:	e00e      	b.n	8001384 <HAL_DMA_IRQHandler+0xb0>
 8001366:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800136a:	e00b      	b.n	8001384 <HAL_DMA_IRQHandler+0xb0>
 800136c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001370:	e008      	b.n	8001384 <HAL_DMA_IRQHandler+0xb0>
 8001372:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001376:	e005      	b.n	8001384 <HAL_DMA_IRQHandler+0xb0>
 8001378:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800137c:	e002      	b.n	8001384 <HAL_DMA_IRQHandler+0xb0>
 800137e:	2340      	movs	r3, #64	; 0x40
 8001380:	e000      	b.n	8001384 <HAL_DMA_IRQHandler+0xb0>
 8001382:	2304      	movs	r3, #4
 8001384:	4a55      	ldr	r2, [pc, #340]	; (80014dc <HAL_DMA_IRQHandler+0x208>)
 8001386:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138c:	2b00      	cmp	r3, #0
 800138e:	f000 8094 	beq.w	80014ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800139a:	e08e      	b.n	80014ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a0:	2202      	movs	r2, #2
 80013a2:	409a      	lsls	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d056      	beq.n	800145a <HAL_DMA_IRQHandler+0x186>
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d051      	beq.n	800145a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10b      	bne.n	80013dc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 020a 	bic.w	r2, r2, #10
 80013d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a38      	ldr	r2, [pc, #224]	; (80014c4 <HAL_DMA_IRQHandler+0x1f0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d029      	beq.n	800143a <HAL_DMA_IRQHandler+0x166>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a37      	ldr	r2, [pc, #220]	; (80014c8 <HAL_DMA_IRQHandler+0x1f4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d022      	beq.n	8001436 <HAL_DMA_IRQHandler+0x162>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a35      	ldr	r2, [pc, #212]	; (80014cc <HAL_DMA_IRQHandler+0x1f8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d01a      	beq.n	8001430 <HAL_DMA_IRQHandler+0x15c>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a34      	ldr	r2, [pc, #208]	; (80014d0 <HAL_DMA_IRQHandler+0x1fc>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d012      	beq.n	800142a <HAL_DMA_IRQHandler+0x156>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a32      	ldr	r2, [pc, #200]	; (80014d4 <HAL_DMA_IRQHandler+0x200>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d00a      	beq.n	8001424 <HAL_DMA_IRQHandler+0x150>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <HAL_DMA_IRQHandler+0x204>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d102      	bne.n	800141e <HAL_DMA_IRQHandler+0x14a>
 8001418:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800141c:	e00e      	b.n	800143c <HAL_DMA_IRQHandler+0x168>
 800141e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001422:	e00b      	b.n	800143c <HAL_DMA_IRQHandler+0x168>
 8001424:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001428:	e008      	b.n	800143c <HAL_DMA_IRQHandler+0x168>
 800142a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142e:	e005      	b.n	800143c <HAL_DMA_IRQHandler+0x168>
 8001430:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001434:	e002      	b.n	800143c <HAL_DMA_IRQHandler+0x168>
 8001436:	2320      	movs	r3, #32
 8001438:	e000      	b.n	800143c <HAL_DMA_IRQHandler+0x168>
 800143a:	2302      	movs	r3, #2
 800143c:	4a27      	ldr	r2, [pc, #156]	; (80014dc <HAL_DMA_IRQHandler+0x208>)
 800143e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	2b00      	cmp	r3, #0
 800144e:	d034      	beq.n	80014ba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001458:	e02f      	b.n	80014ba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	2208      	movs	r2, #8
 8001460:	409a      	lsls	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d028      	beq.n	80014bc <HAL_DMA_IRQHandler+0x1e8>
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	2b00      	cmp	r3, #0
 8001472:	d023      	beq.n	80014bc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 020e 	bic.w	r2, r2, #14
 8001482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148c:	2101      	movs	r1, #1
 800148e:	fa01 f202 	lsl.w	r2, r1, r2
 8001492:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	4798      	blx	r3
    }
  }
  return;
 80014ba:	bf00      	nop
 80014bc:	bf00      	nop
}
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40020008 	.word	0x40020008
 80014c8:	4002001c 	.word	0x4002001c
 80014cc:	40020030 	.word	0x40020030
 80014d0:	40020044 	.word	0x40020044
 80014d4:	40020058 	.word	0x40020058
 80014d8:	4002006c 	.word	0x4002006c
 80014dc:	40020000 	.word	0x40020000

080014e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
 80014ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b10      	cmp	r3, #16
 800150c:	d108      	bne.n	8001520 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68ba      	ldr	r2, [r7, #8]
 800151c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800151e:	e007      	b.n	8001530 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	60da      	str	r2, [r3, #12]
}
 8001530:	bf00      	nop
 8001532:	3714      	adds	r7, #20
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
	...

0800153c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800153c:	b480      	push	{r7}
 800153e:	b08b      	sub	sp, #44	; 0x2c
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154e:	e169      	b.n	8001824 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001550:	2201      	movs	r2, #1
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	69fa      	ldr	r2, [r7, #28]
 8001560:	4013      	ands	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	429a      	cmp	r2, r3
 800156a:	f040 8158 	bne.w	800181e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	4a9a      	ldr	r2, [pc, #616]	; (80017dc <HAL_GPIO_Init+0x2a0>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d05e      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001578:	4a98      	ldr	r2, [pc, #608]	; (80017dc <HAL_GPIO_Init+0x2a0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d875      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 800157e:	4a98      	ldr	r2, [pc, #608]	; (80017e0 <HAL_GPIO_Init+0x2a4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d058      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001584:	4a96      	ldr	r2, [pc, #600]	; (80017e0 <HAL_GPIO_Init+0x2a4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d86f      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 800158a:	4a96      	ldr	r2, [pc, #600]	; (80017e4 <HAL_GPIO_Init+0x2a8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d052      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 8001590:	4a94      	ldr	r2, [pc, #592]	; (80017e4 <HAL_GPIO_Init+0x2a8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d869      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 8001596:	4a94      	ldr	r2, [pc, #592]	; (80017e8 <HAL_GPIO_Init+0x2ac>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d04c      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 800159c:	4a92      	ldr	r2, [pc, #584]	; (80017e8 <HAL_GPIO_Init+0x2ac>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d863      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015a2:	4a92      	ldr	r2, [pc, #584]	; (80017ec <HAL_GPIO_Init+0x2b0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d046      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
 80015a8:	4a90      	ldr	r2, [pc, #576]	; (80017ec <HAL_GPIO_Init+0x2b0>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d85d      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015ae:	2b12      	cmp	r3, #18
 80015b0:	d82a      	bhi.n	8001608 <HAL_GPIO_Init+0xcc>
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d859      	bhi.n	800166a <HAL_GPIO_Init+0x12e>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <HAL_GPIO_Init+0x80>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	08001637 	.word	0x08001637
 80015c0:	08001611 	.word	0x08001611
 80015c4:	08001623 	.word	0x08001623
 80015c8:	08001665 	.word	0x08001665
 80015cc:	0800166b 	.word	0x0800166b
 80015d0:	0800166b 	.word	0x0800166b
 80015d4:	0800166b 	.word	0x0800166b
 80015d8:	0800166b 	.word	0x0800166b
 80015dc:	0800166b 	.word	0x0800166b
 80015e0:	0800166b 	.word	0x0800166b
 80015e4:	0800166b 	.word	0x0800166b
 80015e8:	0800166b 	.word	0x0800166b
 80015ec:	0800166b 	.word	0x0800166b
 80015f0:	0800166b 	.word	0x0800166b
 80015f4:	0800166b 	.word	0x0800166b
 80015f8:	0800166b 	.word	0x0800166b
 80015fc:	0800166b 	.word	0x0800166b
 8001600:	08001619 	.word	0x08001619
 8001604:	0800162d 	.word	0x0800162d
 8001608:	4a79      	ldr	r2, [pc, #484]	; (80017f0 <HAL_GPIO_Init+0x2b4>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d013      	beq.n	8001636 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800160e:	e02c      	b.n	800166a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	623b      	str	r3, [r7, #32]
          break;
 8001616:	e029      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	3304      	adds	r3, #4
 800161e:	623b      	str	r3, [r7, #32]
          break;
 8001620:	e024      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	3308      	adds	r3, #8
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e01f      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	330c      	adds	r3, #12
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e01a      	b.n	800166c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d102      	bne.n	8001644 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800163e:	2304      	movs	r3, #4
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e013      	b.n	800166c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d105      	bne.n	8001658 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800164c:	2308      	movs	r3, #8
 800164e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	611a      	str	r2, [r3, #16]
          break;
 8001656:	e009      	b.n	800166c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001658:	2308      	movs	r3, #8
 800165a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69fa      	ldr	r2, [r7, #28]
 8001660:	615a      	str	r2, [r3, #20]
          break;
 8001662:	e003      	b.n	800166c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
          break;
 8001668:	e000      	b.n	800166c <HAL_GPIO_Init+0x130>
          break;
 800166a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2bff      	cmp	r3, #255	; 0xff
 8001670:	d801      	bhi.n	8001676 <HAL_GPIO_Init+0x13a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	e001      	b.n	800167a <HAL_GPIO_Init+0x13e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	3304      	adds	r3, #4
 800167a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2bff      	cmp	r3, #255	; 0xff
 8001680:	d802      	bhi.n	8001688 <HAL_GPIO_Init+0x14c>
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	e002      	b.n	800168e <HAL_GPIO_Init+0x152>
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	3b08      	subs	r3, #8
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	210f      	movs	r1, #15
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	6a39      	ldr	r1, [r7, #32]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	431a      	orrs	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 80b1 	beq.w	800181e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016bc:	4b4d      	ldr	r3, [pc, #308]	; (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a4c      	ldr	r2, [pc, #304]	; (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b4a      	ldr	r3, [pc, #296]	; (80017f4 <HAL_GPIO_Init+0x2b8>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016d4:	4a48      	ldr	r2, [pc, #288]	; (80017f8 <HAL_GPIO_Init+0x2bc>)
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	220f      	movs	r2, #15
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43db      	mvns	r3, r3
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	4013      	ands	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a40      	ldr	r2, [pc, #256]	; (80017fc <HAL_GPIO_Init+0x2c0>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d013      	beq.n	8001728 <HAL_GPIO_Init+0x1ec>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a3f      	ldr	r2, [pc, #252]	; (8001800 <HAL_GPIO_Init+0x2c4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d00d      	beq.n	8001724 <HAL_GPIO_Init+0x1e8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3e      	ldr	r2, [pc, #248]	; (8001804 <HAL_GPIO_Init+0x2c8>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d007      	beq.n	8001720 <HAL_GPIO_Init+0x1e4>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3d      	ldr	r2, [pc, #244]	; (8001808 <HAL_GPIO_Init+0x2cc>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_GPIO_Init+0x1e0>
 8001718:	2303      	movs	r3, #3
 800171a:	e006      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 800171c:	2304      	movs	r3, #4
 800171e:	e004      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001720:	2302      	movs	r3, #2
 8001722:	e002      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <HAL_GPIO_Init+0x1ee>
 8001728:	2300      	movs	r3, #0
 800172a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800172c:	f002 0203 	and.w	r2, r2, #3
 8001730:	0092      	lsls	r2, r2, #2
 8001732:	4093      	lsls	r3, r2
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800173a:	492f      	ldr	r1, [pc, #188]	; (80017f8 <HAL_GPIO_Init+0x2bc>)
 800173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	3302      	adds	r3, #2
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d006      	beq.n	8001762 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001754:	4b2d      	ldr	r3, [pc, #180]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	492c      	ldr	r1, [pc, #176]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
 8001760:	e006      	b.n	8001770 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001762:	4b2a      	ldr	r3, [pc, #168]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	43db      	mvns	r3, r3
 800176a:	4928      	ldr	r1, [pc, #160]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800176c:	4013      	ands	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800177c:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	4922      	ldr	r1, [pc, #136]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	60cb      	str	r3, [r1, #12]
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800178a:	4b20      	ldr	r3, [pc, #128]	; (800180c <HAL_GPIO_Init+0x2d0>)
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	43db      	mvns	r3, r3
 8001792:	491e      	ldr	r1, [pc, #120]	; (800180c <HAL_GPIO_Init+0x2d0>)
 8001794:	4013      	ands	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d006      	beq.n	80017b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	4918      	ldr	r1, [pc, #96]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017b2:	4b16      	ldr	r3, [pc, #88]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4914      	ldr	r1, [pc, #80]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d021      	beq.n	8001810 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	490e      	ldr	r1, [pc, #56]	; (800180c <HAL_GPIO_Init+0x2d0>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e021      	b.n	800181e <HAL_GPIO_Init+0x2e2>
 80017da:	bf00      	nop
 80017dc:	10320000 	.word	0x10320000
 80017e0:	10310000 	.word	0x10310000
 80017e4:	10220000 	.word	0x10220000
 80017e8:	10210000 	.word	0x10210000
 80017ec:	10120000 	.word	0x10120000
 80017f0:	10110000 	.word	0x10110000
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40010000 	.word	0x40010000
 80017fc:	40010800 	.word	0x40010800
 8001800:	40010c00 	.word	0x40010c00
 8001804:	40011000 	.word	0x40011000
 8001808:	40011400 	.word	0x40011400
 800180c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_GPIO_Init+0x304>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	43db      	mvns	r3, r3
 8001818:	4909      	ldr	r1, [pc, #36]	; (8001840 <HAL_GPIO_Init+0x304>)
 800181a:	4013      	ands	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	3301      	adds	r3, #1
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	fa22 f303 	lsr.w	r3, r2, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	f47f ae8e 	bne.w	8001550 <HAL_GPIO_Init+0x14>
  }
}
 8001834:	bf00      	nop
 8001836:	bf00      	nop
 8001838:	372c      	adds	r7, #44	; 0x2c
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	40010400 	.word	0x40010400

08001844 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	4013      	ands	r3, r2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e001      	b.n	8001866 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	460b      	mov	r3, r1
 800187c:	807b      	strh	r3, [r7, #2]
 800187e:	4613      	mov	r3, r2
 8001880:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001882:	787b      	ldrb	r3, [r7, #1]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001888:	887a      	ldrh	r2, [r7, #2]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800188e:	e003      	b.n	8001898 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001890:	887b      	ldrh	r3, [r7, #2]
 8001892:	041a      	lsls	r2, r3, #16
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	611a      	str	r2, [r3, #16]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a4:	b08b      	sub	sp, #44	; 0x2c
 80018a6:	af06      	add	r7, sp, #24
 80018a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0f1      	b.n	8001a98 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d106      	bne.n	80018ce <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f006 f8db 	bl	8007a84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2203      	movs	r2, #3
 80018d2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f002 f9f2 	bl	8003cc4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	687e      	ldr	r6, [r7, #4]
 80018e8:	466d      	mov	r5, sp
 80018ea:	f106 0410 	add.w	r4, r6, #16
 80018ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	602b      	str	r3, [r5, #0]
 80018f6:	1d33      	adds	r3, r6, #4
 80018f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018fa:	6838      	ldr	r0, [r7, #0]
 80018fc:	f002 f9bc 	bl	8003c78 <USB_CoreInit>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2202      	movs	r2, #2
 800190a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e0c2      	b.n	8001a98 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2100      	movs	r1, #0
 8001918:	4618      	mov	r0, r3
 800191a:	f002 f9ed 	bl	8003cf8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
 8001922:	e040      	b.n	80019a6 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	1c5a      	adds	r2, r3, #1
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	440b      	add	r3, r1
 8001934:	3301      	adds	r3, #1
 8001936:	2201      	movs	r2, #1
 8001938:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800193a:	7bfb      	ldrb	r3, [r7, #15]
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	440b      	add	r3, r1
 800195e:	3303      	adds	r3, #3
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001964:	7bfa      	ldrb	r2, [r7, #15]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	3338      	adds	r3, #56	; 0x38
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	333c      	adds	r3, #60	; 0x3c
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	6879      	ldr	r1, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3340      	adds	r3, #64	; 0x40
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	3301      	adds	r3, #1
 80019a4:	73fb      	strb	r3, [r7, #15]
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d3b9      	bcc.n	8001924 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b0:	2300      	movs	r3, #0
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e044      	b.n	8001a40 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80019b6:	7bfa      	ldrb	r2, [r7, #15]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	440b      	add	r3, r1
 80019c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	440b      	add	r3, r1
 80019da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019de:	7bfa      	ldrb	r2, [r7, #15]
 80019e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80019e2:	7bfa      	ldrb	r2, [r7, #15]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	440b      	add	r3, r1
 80019f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019f8:	7bfa      	ldrb	r2, [r7, #15]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	440b      	add	r3, r1
 8001a06:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a24:	7bfa      	ldrb	r2, [r7, #15]
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	440b      	add	r3, r1
 8001a32:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	7bfa      	ldrb	r2, [r7, #15]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d3b5      	bcc.n	80019b6 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	687e      	ldr	r6, [r7, #4]
 8001a52:	466d      	mov	r5, sp
 8001a54:	f106 0410 	add.w	r4, r6, #16
 8001a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	602b      	str	r3, [r5, #0]
 8001a60:	1d33      	adds	r3, r6, #4
 8001a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a64:	6838      	ldr	r0, [r7, #0]
 8001a66:	f002 f953 	bl	8003d10 <USB_DevInit>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e00d      	b.n	8001a98 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f004 fbd4 	bl	800623e <USB_DevDisconnect>

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aa0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d101      	bne.n	8001ab6 <HAL_PCD_Start+0x16>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	e016      	b.n	8001ae4 <HAL_PCD_Start+0x44>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 f8e8 	bl	8003c98 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ac8:	2101      	movs	r1, #1
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f006 fa29 	bl	8007f22 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f004 fba8 	bl	800622a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f004 fbaa 	bl	8006252 <USB_ReadInterrupts>
 8001afe:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 fb04 	bl	8002118 <PCD_EP_ISR_Handler>

    return;
 8001b10:	e119      	b.n	8001d46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d013      	beq.n	8001b44 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2e:	b292      	uxth	r2, r2
 8001b30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f006 f820 	bl	8007b7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f905 	bl	8001d4c <HAL_PCD_SetAddress>

    return;
 8001b42:	e100      	b.n	8001d46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00c      	beq.n	8001b68 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b60:	b292      	uxth	r2, r2
 8001b62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001b66:	e0ee      	b.n	8001d46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00c      	beq.n	8001b8c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b84:	b292      	uxth	r2, r2
 8001b86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001b8a:	e0dc      	b.n	8001d46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d027      	beq.n	8001be6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0204 	bic.w	r2, r2, #4
 8001ba8:	b292      	uxth	r2, r2
 8001baa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0208 	bic.w	r2, r2, #8
 8001bc0:	b292      	uxth	r2, r2
 8001bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f006 f810 	bl	8007bec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bde:	b292      	uxth	r2, r2
 8001be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001be4:	e0af      	b.n	8001d46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 8083 	beq.w	8001cf8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	77fb      	strb	r3, [r7, #31]
 8001bf6:	e010      	b.n	8001c1a <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	7ffb      	ldrb	r3, [r7, #31]
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	441a      	add	r2, r3
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	8812      	ldrh	r2, [r2, #0]
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	3320      	adds	r3, #32
 8001c0e:	443b      	add	r3, r7
 8001c10:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001c14:	7ffb      	ldrb	r3, [r7, #31]
 8001c16:	3301      	adds	r3, #1
 8001c18:	77fb      	strb	r3, [r7, #31]
 8001c1a:	7ffb      	ldrb	r3, [r7, #31]
 8001c1c:	2b07      	cmp	r3, #7
 8001c1e:	d9eb      	bls.n	8001bf8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	b292      	uxth	r2, r2
 8001c34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	b292      	uxth	r2, r2
 8001c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001c50:	bf00      	nop
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f6      	beq.n	8001c52 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c6c:	b29a      	uxth	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c76:	b292      	uxth	r2, r2
 8001c78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	77fb      	strb	r3, [r7, #31]
 8001c80:	e00f      	b.n	8001ca2 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	7ffa      	ldrb	r2, [r7, #31]
 8001c8c:	0092      	lsls	r2, r2, #2
 8001c8e:	440a      	add	r2, r1
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	3320      	adds	r3, #32
 8001c94:	443b      	add	r3, r7
 8001c96:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8001c9a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001c9c:	7ffb      	ldrb	r3, [r7, #31]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	77fb      	strb	r3, [r7, #31]
 8001ca2:	7ffb      	ldrb	r3, [r7, #31]
 8001ca4:	2b07      	cmp	r3, #7
 8001ca6:	d9ec      	bls.n	8001c82 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0208 	orr.w	r2, r2, #8
 8001cba:	b292      	uxth	r2, r2
 8001cbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0204 	orr.w	r2, r2, #4
 8001cea:	b292      	uxth	r2, r2
 8001cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f005 ff61 	bl	8007bb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001cf6:	e026      	b.n	8001d46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00f      	beq.n	8001d22 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d14:	b292      	uxth	r2, r2
 8001d16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f005 ff1f 	bl	8007b5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001d20:	e011      	b.n	8001d46 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00c      	beq.n	8001d46 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d3e:	b292      	uxth	r2, r2
 8001d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d44:	bf00      	nop
  }
}
 8001d46:	3720      	adds	r7, #32
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_PCD_SetAddress+0x1a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e013      	b.n	8001d8e <HAL_PCD_SetAddress+0x42>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	78fa      	ldrb	r2, [r7, #3]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f004 fa40 	bl	8006204 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	4608      	mov	r0, r1
 8001da0:	4611      	mov	r1, r2
 8001da2:	461a      	mov	r2, r3
 8001da4:	4603      	mov	r3, r0
 8001da6:	70fb      	strb	r3, [r7, #3]
 8001da8:	460b      	mov	r3, r1
 8001daa:	803b      	strh	r3, [r7, #0]
 8001dac:	4613      	mov	r3, r2
 8001dae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	da0e      	bge.n	8001dda <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	1c5a      	adds	r2, r3, #1
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	705a      	strb	r2, [r3, #1]
 8001dd8:	e00e      	b.n	8001df8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	f003 0207 	and.w	r2, r3, #7
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e04:	883a      	ldrh	r2, [r7, #0]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	78ba      	ldrb	r2, [r7, #2]
 8001e0e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e10:	78bb      	ldrb	r3, [r7, #2]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d102      	bne.n	8001e1c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d101      	bne.n	8001e2a <HAL_PCD_EP_Open+0x94>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e00e      	b.n	8001e48 <HAL_PCD_EP_Open+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68f9      	ldr	r1, [r7, #12]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 ff89 	bl	8003d50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001e46:	7afb      	ldrb	r3, [r7, #11]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da0e      	bge.n	8001e82 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	705a      	strb	r2, [r3, #1]
 8001e80:	e00e      	b.n	8001ea0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 0207 	and.w	r2, r3, #7
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_EP_Close+0x6a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e00e      	b.n	8001ed8 <HAL_PCD_EP_Close+0x88>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f002 fb01 	bl	80044d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	60f8      	str	r0, [r7, #12]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	460b      	mov	r3, r1
 8001eee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef0:	7afb      	ldrb	r3, [r7, #11]
 8001ef2:	f003 0207 	and.w	r2, r3, #7
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4413      	add	r3, r2
 8001f06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6979      	ldr	r1, [r7, #20]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 fcb8 	bl	80048a8 <USB_EPStartXfer>

  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f52:	7afb      	ldrb	r3, [r7, #11]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6979      	ldr	r1, [r7, #20]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fc81 	bl	80048a8 <USB_EPStartXfer>

  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3718      	adds	r7, #24
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	f003 0207 	and.w	r2, r3, #7
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d901      	bls.n	8001fce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e04c      	b.n	8002068 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da0e      	bge.n	8001ff4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fd6:	78fb      	ldrb	r3, [r7, #3]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	4413      	add	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	705a      	strb	r2, [r3, #1]
 8001ff2:	e00c      	b.n	800200e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2201      	movs	r2, #1
 8002012:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	b2da      	uxtb	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_PCD_EP_SetStall+0x7e>
 800202a:	2302      	movs	r3, #2
 800202c:	e01c      	b.n	8002068 <HAL_PCD_EP_SetStall+0xb8>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68f9      	ldr	r1, [r7, #12]
 800203c:	4618      	mov	r0, r3
 800203e:	f003 ffe4 	bl	800600a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002042:	78fb      	ldrb	r3, [r7, #3]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	2b00      	cmp	r3, #0
 800204a:	d108      	bne.n	800205e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f004 f909 	bl	8006270 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	f003 020f 	and.w	r2, r3, #15
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d901      	bls.n	800208e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e040      	b.n	8002110 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800208e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002092:	2b00      	cmp	r3, #0
 8002094:	da0e      	bge.n	80020b4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	705a      	strb	r2, [r3, #1]
 80020b2:	e00e      	b.n	80020d2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	f003 0207 	and.w	r2, r3, #7
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020d8:	78fb      	ldrb	r3, [r7, #3]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_PCD_EP_ClrStall+0x82>
 80020ee:	2302      	movs	r3, #2
 80020f0:	e00e      	b.n	8002110 <HAL_PCD_EP_ClrStall+0xa0>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68f9      	ldr	r1, [r7, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f003 ffd2 	bl	80060aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b096      	sub	sp, #88	; 0x58
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002120:	e3bf      	b.n	80028a2 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800212a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800212e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002132:	b2db      	uxtb	r3, r3
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800213c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002140:	2b00      	cmp	r3, #0
 8002142:	f040 8179 	bne.w	8002438 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002146:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	2b00      	cmp	r3, #0
 8002150:	d152      	bne.n	80021f8 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800215e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002162:	81fb      	strh	r3, [r7, #14]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	89fb      	ldrh	r3, [r7, #14]
 800216a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800216e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002172:	b29b      	uxth	r3, r3
 8002174:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3328      	adds	r3, #40	; 0x28
 800217a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002184:	b29b      	uxth	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	3302      	adds	r3, #2
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	4413      	add	r3, r2
 800219a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80021a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	441a      	add	r2, r3
 80021b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80021b6:	2100      	movs	r1, #0
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f005 fcb6 	bl	8007b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 836b 	beq.w	80028a2 <PCD_EP_ISR_Handler+0x78a>
 80021cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f040 8366 	bne.w	80028a2 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b292      	uxth	r2, r2
 80021ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80021f6:	e354      	b.n	80028a2 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021fe:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800220a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800220e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002212:	2b00      	cmp	r3, #0
 8002214:	d034      	beq.n	8002280 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221e:	b29b      	uxth	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	3306      	adds	r3, #6
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800223e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002240:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800224c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002252:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002254:	b29b      	uxth	r3, r3
 8002256:	f004 f85b 	bl	8006310 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29a      	uxth	r2, r3
 8002262:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002266:	4013      	ands	r3, r2
 8002268:	823b      	strh	r3, [r7, #16]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	8a3a      	ldrh	r2, [r7, #16]
 8002270:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002274:	b292      	uxth	r2, r2
 8002276:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f005 fc29 	bl	8007ad0 <HAL_PCD_SetupStageCallback>
 800227e:	e310      	b.n	80028a2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002280:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002284:	2b00      	cmp	r3, #0
 8002286:	f280 830c 	bge.w	80028a2 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	b29a      	uxth	r2, r3
 8002292:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002296:	4013      	ands	r3, r2
 8002298:	83fb      	strh	r3, [r7, #30]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	8bfa      	ldrh	r2, [r7, #30]
 80022a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022a4:	b292      	uxth	r2, r2
 80022a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	3306      	adds	r3, #6
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80022d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d019      	beq.n	8002310 <PCD_EP_ISR_Handler+0x1f8>
 80022dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d015      	beq.n	8002310 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ea:	6959      	ldr	r1, [r3, #20]
 80022ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80022f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f004 f80b 	bl	8006310 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80022fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	441a      	add	r2, r3
 8002304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002306:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002308:	2100      	movs	r1, #0
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f005 fbf2 	bl	8007af4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800231a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800231e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 82bd 	bne.w	80028a2 <PCD_EP_ISR_Handler+0x78a>
 8002328:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800232c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002330:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002334:	f000 82b5 	beq.w	80028a2 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002346:	b29b      	uxth	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	4413      	add	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002362:	b29a      	uxth	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	801a      	strh	r2, [r3, #0]
 8002368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b3e      	cmp	r3, #62	; 0x3e
 800236e:	d91d      	bls.n	80023ac <PCD_EP_ISR_Handler+0x294>
 8002370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	095b      	lsrs	r3, r3, #5
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
 8002378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2b00      	cmp	r3, #0
 8002382:	d102      	bne.n	800238a <PCD_EP_ISR_Handler+0x272>
 8002384:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002386:	3b01      	subs	r3, #1
 8002388:	647b      	str	r3, [r7, #68]	; 0x44
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29a      	uxth	r2, r3
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	b29b      	uxth	r3, r3
 8002394:	029b      	lsls	r3, r3, #10
 8002396:	b29b      	uxth	r3, r3
 8002398:	4313      	orrs	r3, r2
 800239a:	b29b      	uxth	r3, r3
 800239c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	801a      	strh	r2, [r3, #0]
 80023aa:	e026      	b.n	80023fa <PCD_EP_ISR_Handler+0x2e2>
 80023ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10a      	bne.n	80023ca <PCD_EP_ISR_Handler+0x2b2>
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	801a      	strh	r2, [r3, #0]
 80023c8:	e017      	b.n	80023fa <PCD_EP_ISR_Handler+0x2e2>
 80023ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	647b      	str	r3, [r7, #68]	; 0x44
 80023d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <PCD_EP_ISR_Handler+0x2cc>
 80023de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e0:	3301      	adds	r3, #1
 80023e2:	647b      	str	r3, [r7, #68]	; 0x44
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	881b      	ldrh	r3, [r3, #0]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	029b      	lsls	r3, r3, #10
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	881b      	ldrh	r3, [r3, #0]
 8002400:	b29b      	uxth	r3, r3
 8002402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	827b      	strh	r3, [r7, #18]
 800240c:	8a7b      	ldrh	r3, [r7, #18]
 800240e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002412:	827b      	strh	r3, [r7, #18]
 8002414:	8a7b      	ldrh	r3, [r7, #18]
 8002416:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800241a:	827b      	strh	r3, [r7, #18]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	8a7b      	ldrh	r3, [r7, #18]
 8002422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800242a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800242e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002432:	b29b      	uxth	r3, r3
 8002434:	8013      	strh	r3, [r2, #0]
 8002436:	e234      	b.n	80028a2 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800244c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002450:	2b00      	cmp	r3, #0
 8002452:	f280 80fc 	bge.w	800264e <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	b29a      	uxth	r2, r3
 8002468:	f640 738f 	movw	r3, #3983	; 0xf8f
 800246c:	4013      	ands	r3, r2
 800246e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	461a      	mov	r2, r3
 8002478:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002488:	b292      	uxth	r2, r2
 800248a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800248c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	4413      	add	r3, r2
 80024a0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80024a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024a4:	7b1b      	ldrb	r3, [r3, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d125      	bne.n	80024f6 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	3306      	adds	r3, #6
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	4413      	add	r3, r2
 80024c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80024d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8092 	beq.w	8002604 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e6:	6959      	ldr	r1, [r3, #20]
 80024e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ea:	88da      	ldrh	r2, [r3, #6]
 80024ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80024f0:	f003 ff0e 	bl	8006310 <USB_ReadPMA>
 80024f4:	e086      	b.n	8002604 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80024f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024f8:	78db      	ldrb	r3, [r3, #3]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d10a      	bne.n	8002514 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80024fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002502:	461a      	mov	r2, r3
 8002504:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9d9 	bl	80028be <HAL_PCD_EP_DB_Receive>
 800250c:	4603      	mov	r3, r0
 800250e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002512:	e077      	b.n	8002604 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	881b      	ldrh	r3, [r3, #0]
 8002524:	b29b      	uxth	r3, r3
 8002526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	441a      	add	r2, r3
 8002540:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800254c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002550:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002554:	b29b      	uxth	r3, r3
 8002556:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d024      	beq.n	80025bc <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800257a:	b29b      	uxth	r3, r3
 800257c:	461a      	mov	r2, r3
 800257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	4413      	add	r3, r2
 8002586:	3302      	adds	r3, #2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4413      	add	r3, r2
 8002590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800259a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800259e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d02e      	beq.n	8002604 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ac:	6959      	ldr	r1, [r3, #20]
 80025ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b0:	891a      	ldrh	r2, [r3, #8]
 80025b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025b6:	f003 feab 	bl	8006310 <USB_ReadPMA>
 80025ba:	e023      	b.n	8002604 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	461a      	mov	r2, r3
 80025c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	3306      	adds	r3, #6
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80025e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d009      	beq.n	8002604 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6818      	ldr	r0, [r3, #0]
 80025f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025f6:	6959      	ldr	r1, [r3, #20]
 80025f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025fa:	895a      	ldrh	r2, [r3, #10]
 80025fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002600:	f003 fe86 	bl	8006310 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800260c:	441a      	add	r2, r3
 800260e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002610:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800261a:	441a      	add	r2, r3
 800261c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800261e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d005      	beq.n	8002634 <PCD_EP_ISR_Handler+0x51c>
 8002628:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800262c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d206      	bcs.n	8002642 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f005 fa5a 	bl	8007af4 <HAL_PCD_DataOutStageCallback>
 8002640:	e005      	b.n	800264e <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002648:	4618      	mov	r0, r3
 800264a:	f002 f92d 	bl	80048a8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800264e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8123 	beq.w	80028a2 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800265c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	461a      	mov	r2, r3
 8002676:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	441a      	add	r2, r3
 800269c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80026a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80026ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ae:	78db      	ldrb	r3, [r3, #3]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	f040 80a2 	bne.w	80027fa <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80026b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80026bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026be:	7b1b      	ldrb	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 8093 	beq.w	80027ec <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026c6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d046      	beq.n	8002760 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d4:	785b      	ldrb	r3, [r3, #1]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d126      	bne.n	8002728 <PCD_EP_ISR_Handler+0x610>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	4413      	add	r3, r2
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	011a      	lsls	r2, r3, #4
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	4413      	add	r3, r2
 80026fc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002700:	623b      	str	r3, [r7, #32]
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800270c:	b29a      	uxth	r2, r3
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	801a      	strh	r2, [r3, #0]
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	b29b      	uxth	r3, r3
 8002718:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800271c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002720:	b29a      	uxth	r2, r3
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	801a      	strh	r2, [r3, #0]
 8002726:	e061      	b.n	80027ec <PCD_EP_ISR_Handler+0x6d4>
 8002728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d15d      	bne.n	80027ec <PCD_EP_ISR_Handler+0x6d4>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	4413      	add	r3, r2
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	011a      	lsls	r2, r3, #4
 800274e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002750:	4413      	add	r3, r2
 8002752:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	2200      	movs	r2, #0
 800275c:	801a      	strh	r2, [r3, #0]
 800275e:	e045      	b.n	80027ec <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002768:	785b      	ldrb	r3, [r3, #1]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d126      	bne.n	80027bc <PCD_EP_ISR_Handler+0x6a4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	637b      	str	r3, [r7, #52]	; 0x34
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277c:	b29b      	uxth	r3, r3
 800277e:	461a      	mov	r2, r3
 8002780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002782:	4413      	add	r3, r2
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
 8002786:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	011a      	lsls	r2, r3, #4
 800278c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800278e:	4413      	add	r3, r2
 8002790:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	881b      	ldrh	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b8:	801a      	strh	r2, [r3, #0]
 80027ba:	e017      	b.n	80027ec <PCD_EP_ISR_Handler+0x6d4>
 80027bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027be:	785b      	ldrb	r3, [r3, #1]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d113      	bne.n	80027ec <PCD_EP_ISR_Handler+0x6d4>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d2:	4413      	add	r3, r2
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	011a      	lsls	r2, r3, #4
 80027dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027de:	4413      	add	r3, r2
 80027e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e8:	2200      	movs	r2, #0
 80027ea:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f005 f999 	bl	8007b2a <HAL_PCD_DataInStageCallback>
 80027f8:	e053      	b.n	80028a2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80027fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d146      	bne.n	8002894 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800280e:	b29b      	uxth	r3, r3
 8002810:	461a      	mov	r2, r3
 8002812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	4413      	add	r3, r2
 800281a:	3302      	adds	r3, #2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	4413      	add	r3, r2
 8002824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800282e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800283a:	429a      	cmp	r2, r3
 800283c:	d907      	bls.n	800284e <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800283e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002846:	1ad2      	subs	r2, r2, r3
 8002848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284a:	619a      	str	r2, [r3, #24]
 800284c:	e002      	b.n	8002854 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800284e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d106      	bne.n	800286a <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800285c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f005 f961 	bl	8007b2a <HAL_PCD_DataInStageCallback>
 8002868:	e01b      	b.n	80028a2 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800286a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002872:	441a      	add	r2, r3
 8002874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002876:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002880:	441a      	add	r2, r3
 8002882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002884:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800288c:	4618      	mov	r0, r3
 800288e:	f002 f80b 	bl	80048a8 <USB_EPStartXfer>
 8002892:	e006      	b.n	80028a2 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002894:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002898:	461a      	mov	r2, r3
 800289a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f91b 	bl	8002ad8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	b21b      	sxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f6ff ac37 	blt.w	8002122 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3758      	adds	r7, #88	; 0x58
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b088      	sub	sp, #32
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	4613      	mov	r3, r2
 80028ca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d07e      	beq.n	80029d4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	3302      	adds	r3, #2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028fe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	8b7b      	ldrh	r3, [r7, #26]
 8002906:	429a      	cmp	r2, r3
 8002908:	d306      	bcc.n	8002918 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	699a      	ldr	r2, [r3, #24]
 800290e:	8b7b      	ldrh	r3, [r7, #26]
 8002910:	1ad2      	subs	r2, r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	619a      	str	r2, [r3, #24]
 8002916:	e002      	b.n	800291e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2200      	movs	r2, #0
 800291c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d123      	bne.n	800296e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800293c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002940:	833b      	strh	r3, [r7, #24]
 8002942:	8b3b      	ldrh	r3, [r7, #24]
 8002944:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002948:	833b      	strh	r3, [r7, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	441a      	add	r2, r3
 8002958:	8b3b      	ldrh	r3, [r7, #24]
 800295a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800295e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002966:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296a:	b29b      	uxth	r3, r3
 800296c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d01f      	beq.n	80029b8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800298e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002992:	82fb      	strh	r3, [r7, #22]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	441a      	add	r2, r3
 80029a2:	8afb      	ldrh	r3, [r7, #22]
 80029a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029b8:	8b7b      	ldrh	r3, [r7, #26]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 8087 	beq.w	8002ace <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6959      	ldr	r1, [r3, #20]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	891a      	ldrh	r2, [r3, #8]
 80029cc:	8b7b      	ldrh	r3, [r7, #26]
 80029ce:	f003 fc9f 	bl	8006310 <USB_ReadPMA>
 80029d2:	e07c      	b.n	8002ace <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029dc:	b29b      	uxth	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	3306      	adds	r3, #6
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029f6:	881b      	ldrh	r3, [r3, #0]
 80029f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029fc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	8b7b      	ldrh	r3, [r7, #26]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d306      	bcc.n	8002a16 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	699a      	ldr	r2, [r3, #24]
 8002a0c:	8b7b      	ldrh	r3, [r7, #26]
 8002a0e:	1ad2      	subs	r2, r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	619a      	str	r2, [r3, #24]
 8002a14:	e002      	b.n	8002a1c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d123      	bne.n	8002a6c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	83fb      	strh	r3, [r7, #30]
 8002a40:	8bfb      	ldrh	r3, [r7, #30]
 8002a42:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a46:	83fb      	strh	r3, [r7, #30]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	441a      	add	r2, r3
 8002a56:	8bfb      	ldrh	r3, [r7, #30]
 8002a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002a6c:	88fb      	ldrh	r3, [r7, #6]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d11f      	bne.n	8002ab6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a90:	83bb      	strh	r3, [r7, #28]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	461a      	mov	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	441a      	add	r2, r3
 8002aa0:	8bbb      	ldrh	r3, [r7, #28]
 8002aa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002aa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ab6:	8b7b      	ldrh	r3, [r7, #26]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6959      	ldr	r1, [r3, #20]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	895a      	ldrh	r2, [r3, #10]
 8002ac8:	8b7b      	ldrh	r3, [r7, #26]
 8002aca:	f003 fc21 	bl	8006310 <USB_ReadPMA>
    }
  }

  return count;
 8002ace:	8b7b      	ldrh	r3, [r7, #26]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b0a4      	sub	sp, #144	; 0x90
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 81dd 	beq.w	8002eac <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	3302      	adds	r3, #2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	699a      	ldr	r2, [r3, #24]
 8002b22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d907      	bls.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b32:	1ad2      	subs	r2, r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	619a      	str	r2, [r3, #24]
 8002b38:	e002      	b.n	8002b40 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f040 80b9 	bne.w	8002cbc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d126      	bne.n	8002ba0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b66:	4413      	add	r3, r2
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	011a      	lsls	r2, r3, #4
 8002b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b72:	4413      	add	r3, r2
 8002b74:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	801a      	strh	r2, [r3, #0]
 8002b9e:	e01a      	b.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	785b      	ldrb	r3, [r3, #1]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d116      	bne.n	8002bd6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	4413      	add	r3, r2
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	011a      	lsls	r2, r3, #4
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	4413      	add	r3, r2
 8002bca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	785b      	ldrb	r3, [r3, #1]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d126      	bne.n	8002c32 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	011a      	lsls	r2, r3, #4
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c0a:	61bb      	str	r3, [r7, #24]
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	801a      	strh	r2, [r3, #0]
 8002c30:	e017      	b.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d113      	bne.n	8002c62 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	461a      	mov	r2, r3
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	4413      	add	r3, r2
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	011a      	lsls	r2, r3, #4
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	4413      	add	r3, r2
 8002c56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c5a:	623b      	str	r3, [r7, #32]
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f004 ff5e 	bl	8007b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 82fc 	beq.w	8003272 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c94:	82fb      	strh	r3, [r7, #22]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	441a      	add	r2, r3
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	8013      	strh	r3, [r2, #0]
 8002cba:	e2da      	b.n	8003272 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d021      	beq.n	8002d0a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 82ae 	bne.w	8003272 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d1e:	441a      	add	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	69da      	ldr	r2, [r3, #28]
 8002d28:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d2c:	441a      	add	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d30b      	bcc.n	8002d56 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	6a1a      	ldr	r2, [r3, #32]
 8002d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d4e:	1ad2      	subs	r2, r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	621a      	str	r2, [r3, #32]
 8002d54:	e017      	b.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002d5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002d6e:	e00a      	b.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	785b      	ldrb	r3, [r3, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d165      	bne.n	8002e5a <HAL_PCD_EP_DB_Transmit+0x382>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	461a      	mov	r2, r3
 8002da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da2:	4413      	add	r3, r2
 8002da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	011a      	lsls	r2, r3, #4
 8002dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dae:	4413      	add	r3, r2
 8002db0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002db4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db8:	881b      	ldrh	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	801a      	strh	r2, [r3, #0]
 8002dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dca:	2b3e      	cmp	r3, #62	; 0x3e
 8002dcc:	d91d      	bls.n	8002e0a <HAL_PCD_EP_DB_Transmit+0x332>
 8002dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dd2:	095b      	lsrs	r3, r3, #5
 8002dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <HAL_PCD_EP_DB_Transmit+0x310>
 8002de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de4:	3b01      	subs	r3, #1
 8002de6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	029b      	lsls	r3, r3, #10
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e06:	801a      	strh	r2, [r3, #0]
 8002e08:	e044      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d10a      	bne.n	8002e28 <HAL_PCD_EP_DB_Transmit+0x350>
 8002e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	e035      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e2c:	085b      	lsrs	r3, r3, #1
 8002e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d002      	beq.n	8002e42 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e3e:	3301      	adds	r3, #1
 8002e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e44:	881b      	ldrh	r3, [r3, #0]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	029b      	lsls	r3, r3, #10
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4313      	orrs	r3, r2
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	801a      	strh	r2, [r3, #0]
 8002e58:	e01c      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	785b      	ldrb	r3, [r3, #1]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d118      	bne.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	647b      	str	r3, [r7, #68]	; 0x44
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	4413      	add	r3, r2
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	011a      	lsls	r2, r3, #4
 8002e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e82:	4413      	add	r3, r2
 8002e84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002e88:	643b      	str	r3, [r7, #64]	; 0x40
 8002e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e92:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	6959      	ldr	r1, [r3, #20]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	891a      	ldrh	r2, [r3, #8]
 8002ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	f003 f9ee 	bl	8006286 <USB_WritePMA>
 8002eaa:	e1e2      	b.n	8003272 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3306      	adds	r3, #6
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	4413      	add	r3, r2
 8002eca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ed4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	699a      	ldr	r2, [r3, #24]
 8002edc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d307      	bcc.n	8002ef4 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	699a      	ldr	r2, [r3, #24]
 8002ee8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002eec:	1ad2      	subs	r2, r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	619a      	str	r2, [r3, #24]
 8002ef2:	e002      	b.n	8002efa <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 80c0 	bne.w	8003084 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	785b      	ldrb	r3, [r3, #1]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d126      	bne.n	8002f5a <HAL_PCD_EP_DB_Transmit+0x482>
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f20:	4413      	add	r3, r2
 8002f22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	011a      	lsls	r2, r3, #4
 8002f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f32:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f42:	801a      	strh	r2, [r3, #0]
 8002f44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f56:	801a      	strh	r2, [r3, #0]
 8002f58:	e01a      	b.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	785b      	ldrb	r3, [r3, #1]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d116      	bne.n	8002f90 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	667b      	str	r3, [r7, #100]	; 0x64
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f76:	4413      	add	r3, r2
 8002f78:	667b      	str	r3, [r7, #100]	; 0x64
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	011a      	lsls	r2, r3, #4
 8002f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f82:	4413      	add	r3, r2
 8002f84:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f88:	663b      	str	r3, [r7, #96]	; 0x60
 8002f8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	677b      	str	r3, [r7, #116]	; 0x74
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	785b      	ldrb	r3, [r3, #1]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d12b      	bne.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb2:	4413      	add	r3, r2
 8002fb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	011a      	lsls	r2, r3, #4
 8002fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ff2:	801a      	strh	r2, [r3, #0]
 8002ff4:	e017      	b.n	8003026 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	785b      	ldrb	r3, [r3, #1]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d113      	bne.n	8003026 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003006:	b29b      	uxth	r3, r3
 8003008:	461a      	mov	r2, r3
 800300a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300c:	4413      	add	r3, r2
 800300e:	677b      	str	r3, [r7, #116]	; 0x74
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	011a      	lsls	r2, r3, #4
 8003016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003018:	4413      	add	r3, r2
 800301a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800301e:	673b      	str	r3, [r7, #112]	; 0x70
 8003020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003022:	2200      	movs	r2, #0
 8003024:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	4619      	mov	r1, r3
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f004 fd7c 	bl	8007b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003038:	2b00      	cmp	r3, #0
 800303a:	f040 811a 	bne.w	8003272 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	461a      	mov	r2, r3
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003058:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	441a      	add	r2, r3
 800306a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800306e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800307a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800307e:	b29b      	uxth	r3, r3
 8003080:	8013      	strh	r3, [r2, #0]
 8003082:	e0f6      	b.n	8003272 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d121      	bne.n	80030d2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	441a      	add	r2, r3
 80030ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030d8:	2b01      	cmp	r3, #1
 80030da:	f040 80ca 	bne.w	8003272 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030e6:	441a      	add	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80030f4:	441a      	add	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	6a1a      	ldr	r2, [r3, #32]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	d30b      	bcc.n	800311e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	6a1a      	ldr	r2, [r3, #32]
 8003112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003116:	1ad2      	subs	r2, r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	621a      	str	r2, [r3, #32]
 800311c:	e017      	b.n	800314e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d108      	bne.n	8003138 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8003126:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800312a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003136:	e00a      	b.n	800314e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	657b      	str	r3, [r7, #84]	; 0x54
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	785b      	ldrb	r3, [r3, #1]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d165      	bne.n	8003228 <HAL_PCD_EP_DB_Transmit+0x750>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800316a:	b29b      	uxth	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003170:	4413      	add	r3, r2
 8003172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	011a      	lsls	r2, r3, #4
 800317a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800317c:	4413      	add	r3, r2
 800317e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003182:	65bb      	str	r3, [r7, #88]	; 0x58
 8003184:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318e:	b29a      	uxth	r2, r3
 8003190:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003192:	801a      	strh	r2, [r3, #0]
 8003194:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003198:	2b3e      	cmp	r3, #62	; 0x3e
 800319a:	d91d      	bls.n	80031d8 <HAL_PCD_EP_DB_Transmit+0x700>
 800319c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80031a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <HAL_PCD_EP_DB_Transmit+0x6de>
 80031b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031b2:	3b01      	subs	r3, #1
 80031b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80031b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031be:	b29b      	uxth	r3, r3
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	4313      	orrs	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031d4:	801a      	strh	r2, [r3, #0]
 80031d6:	e041      	b.n	800325c <HAL_PCD_EP_DB_Transmit+0x784>
 80031d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <HAL_PCD_EP_DB_Transmit+0x71e>
 80031e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f2:	801a      	strh	r2, [r3, #0]
 80031f4:	e032      	b.n	800325c <HAL_PCD_EP_DB_Transmit+0x784>
 80031f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80031fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <HAL_PCD_EP_DB_Transmit+0x738>
 800320a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320c:	3301      	adds	r3, #1
 800320e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003210:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29a      	uxth	r2, r3
 8003216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003218:	b29b      	uxth	r3, r3
 800321a:	029b      	lsls	r3, r3, #10
 800321c:	b29b      	uxth	r3, r3
 800321e:	4313      	orrs	r3, r2
 8003220:	b29a      	uxth	r2, r3
 8003222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	e019      	b.n	800325c <HAL_PCD_EP_DB_Transmit+0x784>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	785b      	ldrb	r3, [r3, #1]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d115      	bne.n	800325c <HAL_PCD_EP_DB_Transmit+0x784>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800323e:	4413      	add	r3, r2
 8003240:	657b      	str	r3, [r7, #84]	; 0x54
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	011a      	lsls	r2, r3, #4
 8003248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324a:	4413      	add	r3, r2
 800324c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003250:	653b      	str	r3, [r7, #80]	; 0x50
 8003252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003256:	b29a      	uxth	r2, r3
 8003258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6818      	ldr	r0, [r3, #0]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	6959      	ldr	r1, [r3, #20]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	895a      	ldrh	r2, [r3, #10]
 8003268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326c:	b29b      	uxth	r3, r3
 800326e:	f003 f80a 	bl	8006286 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800328c:	82bb      	strh	r3, [r7, #20]
 800328e:	8abb      	ldrh	r3, [r7, #20]
 8003290:	f083 0310 	eor.w	r3, r3, #16
 8003294:	82bb      	strh	r3, [r7, #20]
 8003296:	8abb      	ldrh	r3, [r7, #20]
 8003298:	f083 0320 	eor.w	r3, r3, #32
 800329c:	82bb      	strh	r3, [r7, #20]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	441a      	add	r2, r3
 80032ac:	8abb      	ldrh	r3, [r7, #20]
 80032ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032be:	b29b      	uxth	r3, r3
 80032c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3790      	adds	r7, #144	; 0x90
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	460b      	mov	r3, r1
 80032d8:	817b      	strh	r3, [r7, #10]
 80032da:	4613      	mov	r3, r2
 80032dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032de:	897b      	ldrh	r3, [r7, #10]
 80032e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00b      	beq.n	8003302 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ea:	897b      	ldrh	r3, [r7, #10]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4413      	add	r3, r2
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e009      	b.n	8003316 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003302:	897a      	ldrh	r2, [r7, #10]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003316:	893b      	ldrh	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d107      	bne.n	800332c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2200      	movs	r2, #0
 8003320:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	b29a      	uxth	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	80da      	strh	r2, [r3, #6]
 800332a:	e00b      	b.n	8003344 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	2201      	movs	r2, #1
 8003330:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	b29a      	uxth	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b29a      	uxth	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	371c      	adds	r7, #28
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e272      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 8087 	beq.w	800347e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003370:	4b92      	ldr	r3, [pc, #584]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b04      	cmp	r3, #4
 800337a:	d00c      	beq.n	8003396 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800337c:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d112      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
 8003388:	4b8c      	ldr	r3, [pc, #560]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003394:	d10b      	bne.n	80033ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003396:	4b89      	ldr	r3, [pc, #548]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d06c      	beq.n	800347c <HAL_RCC_OscConfig+0x12c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d168      	bne.n	800347c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e24c      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x76>
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7f      	ldr	r2, [pc, #508]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e02e      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCC_OscConfig+0x98>
 80033ce:	4b7b      	ldr	r3, [pc, #492]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a7a      	ldr	r2, [pc, #488]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	4b78      	ldr	r3, [pc, #480]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a77      	ldr	r2, [pc, #476]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0xbc>
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a71      	ldr	r2, [pc, #452]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6f      	ldr	r3, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6e      	ldr	r2, [pc, #440]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xd4>
 800340c:	4b6b      	ldr	r3, [pc, #428]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a6a      	ldr	r2, [pc, #424]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b68      	ldr	r3, [pc, #416]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a67      	ldr	r2, [pc, #412]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd f9b4 	bl	8000798 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fd f9b0 	bl	8000798 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e200      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b5d      	ldr	r3, [pc, #372]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xe4>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fd f9a0 	bl	8000798 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fd f99c 	bl	8000798 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1ec      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b53      	ldr	r3, [pc, #332]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x10c>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348a:	4b4c      	ldr	r3, [pc, #304]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003496:	4b49      	ldr	r3, [pc, #292]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
 80034a2:	4b46      	ldr	r3, [pc, #280]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b43      	ldr	r3, [pc, #268]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1c0      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4939      	ldr	r1, [pc, #228]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ea:	f7fd f955 	bl	8000798 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fd f951 	bl	8000798 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1a1      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4927      	ldr	r1, [pc, #156]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <HAL_RCC_OscConfig+0x270>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fd f934 	bl	8000798 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fd f930 	bl	8000798 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e180      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03a      	beq.n	80035d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d019      	beq.n	800359a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_RCC_OscConfig+0x274>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356c:	f7fd f914 	bl	8000798 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fd f910 	bl	8000798 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e160      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_RCC_OscConfig+0x26c>)
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003592:	2001      	movs	r0, #1
 8003594:	f000 fa9c 	bl	8003ad0 <RCC_Delay>
 8003598:	e01c      	b.n	80035d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359a:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_OscConfig+0x274>)
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a0:	f7fd f8fa 	bl	8000798 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a6:	e00f      	b.n	80035c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fd f8f6 	bl	8000798 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d908      	bls.n	80035c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e146      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000
 80035c0:	42420000 	.word	0x42420000
 80035c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	4b92      	ldr	r3, [pc, #584]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e9      	bne.n	80035a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a6 	beq.w	800372e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e6:	4b8b      	ldr	r3, [pc, #556]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10d      	bne.n	800360e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	4b88      	ldr	r3, [pc, #544]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	4a87      	ldr	r2, [pc, #540]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035fc:	61d3      	str	r3, [r2, #28]
 80035fe:	4b85      	ldr	r3, [pc, #532]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003606:	60bb      	str	r3, [r7, #8]
 8003608:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360e:	4b82      	ldr	r3, [pc, #520]	; (8003818 <HAL_RCC_OscConfig+0x4c8>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d118      	bne.n	800364c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361a:	4b7f      	ldr	r3, [pc, #508]	; (8003818 <HAL_RCC_OscConfig+0x4c8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a7e      	ldr	r2, [pc, #504]	; (8003818 <HAL_RCC_OscConfig+0x4c8>)
 8003620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003624:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003626:	f7fd f8b7 	bl	8000798 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362e:	f7fd f8b3 	bl	8000798 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b64      	cmp	r3, #100	; 0x64
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e103      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b75      	ldr	r3, [pc, #468]	; (8003818 <HAL_RCC_OscConfig+0x4c8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d106      	bne.n	8003662 <HAL_RCC_OscConfig+0x312>
 8003654:	4b6f      	ldr	r3, [pc, #444]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a6e      	ldr	r2, [pc, #440]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	e02d      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0x334>
 800366a:	4b6a      	ldr	r3, [pc, #424]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a69      	ldr	r2, [pc, #420]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	4b67      	ldr	r3, [pc, #412]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4a66      	ldr	r2, [pc, #408]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	e01c      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b05      	cmp	r3, #5
 800368a:	d10c      	bne.n	80036a6 <HAL_RCC_OscConfig+0x356>
 800368c:	4b61      	ldr	r3, [pc, #388]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a60      	ldr	r2, [pc, #384]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6213      	str	r3, [r2, #32]
 8003698:	4b5e      	ldr	r3, [pc, #376]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4a5d      	ldr	r2, [pc, #372]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6213      	str	r3, [r2, #32]
 80036a4:	e00b      	b.n	80036be <HAL_RCC_OscConfig+0x36e>
 80036a6:	4b5b      	ldr	r3, [pc, #364]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a5a      	ldr	r2, [pc, #360]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6213      	str	r3, [r2, #32]
 80036b2:	4b58      	ldr	r3, [pc, #352]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a57      	ldr	r2, [pc, #348]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d015      	beq.n	80036f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c6:	f7fd f867 	bl	8000798 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036cc:	e00a      	b.n	80036e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ce:	f7fd f863 	bl	8000798 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e0b1      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e4:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80036e6:	6a1b      	ldr	r3, [r3, #32]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0ee      	beq.n	80036ce <HAL_RCC_OscConfig+0x37e>
 80036f0:	e014      	b.n	800371c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f2:	f7fd f851 	bl	8000798 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f8:	e00a      	b.n	8003710 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fa:	f7fd f84d 	bl	8000798 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	f241 3288 	movw	r2, #5000	; 0x1388
 8003708:	4293      	cmp	r3, r2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e09b      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003710:	4b40      	ldr	r3, [pc, #256]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ee      	bne.n	80036fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800371c:	7dfb      	ldrb	r3, [r7, #23]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d105      	bne.n	800372e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003722:	4b3c      	ldr	r3, [pc, #240]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800372c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	2b00      	cmp	r3, #0
 8003734:	f000 8087 	beq.w	8003846 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003738:	4b36      	ldr	r3, [pc, #216]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f003 030c 	and.w	r3, r3, #12
 8003740:	2b08      	cmp	r3, #8
 8003742:	d061      	beq.n	8003808 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	2b02      	cmp	r3, #2
 800374a:	d146      	bne.n	80037da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374c:	4b33      	ldr	r3, [pc, #204]	; (800381c <HAL_RCC_OscConfig+0x4cc>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fd f821 	bl	8000798 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7fd f81d 	bl	8000798 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e06d      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800376c:	4b29      	ldr	r3, [pc, #164]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1f0      	bne.n	800375a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	4921      	ldr	r1, [pc, #132]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003794:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a19      	ldr	r1, [r3, #32]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	430b      	orrs	r3, r1
 80037a6:	491b      	ldr	r1, [pc, #108]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ac:	4b1b      	ldr	r3, [pc, #108]	; (800381c <HAL_RCC_OscConfig+0x4cc>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b2:	f7fc fff1 	bl	8000798 <HAL_GetTick>
 80037b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b8:	e008      	b.n	80037cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ba:	f7fc ffed 	bl	8000798 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e03d      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037cc:	4b11      	ldr	r3, [pc, #68]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0f0      	beq.n	80037ba <HAL_RCC_OscConfig+0x46a>
 80037d8:	e035      	b.n	8003846 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <HAL_RCC_OscConfig+0x4cc>)
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fc ffda 	bl	8000798 <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fc ffd6 	bl	8000798 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e026      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x498>
 8003806:	e01e      	b.n	8003846 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d107      	bne.n	8003820 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e019      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
 8003814:	40021000 	.word	0x40021000
 8003818:	40007000 	.word	0x40007000
 800381c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <HAL_RCC_OscConfig+0x500>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	429a      	cmp	r2, r3
 8003832:	d106      	bne.n	8003842 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000

08003854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0d0      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d910      	bls.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b67      	ldr	r3, [pc, #412]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 0207 	bic.w	r2, r3, #7
 800387e:	4965      	ldr	r1, [pc, #404]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0b8      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b0:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c8:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	494d      	ldr	r1, [pc, #308]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d040      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d115      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e073      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06b      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4936      	ldr	r1, [pc, #216]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fc ff28 	bl	8000798 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fc ff24 	bl	8000798 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e053      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d210      	bcs.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 0207 	bic.w	r2, r3, #7
 800398a:	4922      	ldr	r1, [pc, #136]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e032      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	4916      	ldr	r1, [pc, #88]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	490e      	ldr	r1, [pc, #56]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e2:	f000 f821 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490a      	ldr	r1, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1cc>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1d0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fc fe86 	bl	8000714 <HAL_InitTick>

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08008048 	.word	0x08008048
 8003a20:	20000000 	.word	0x20000000
 8003a24:	20000004 	.word	0x20000004

08003a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a42:	4b1e      	ldr	r3, [pc, #120]	; (8003abc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x30>
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x36>
 8003a56:	e027      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4b19      	ldr	r3, [pc, #100]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a5a:	613b      	str	r3, [r7, #16]
      break;
 8003a5c:	e027      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0c9b      	lsrs	r3, r3, #18
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	4a17      	ldr	r2, [pc, #92]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a68:	5cd3      	ldrb	r3, [r2, r3]
 8003a6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d010      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a76:	4b11      	ldr	r3, [pc, #68]	; (8003abc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	0c5b      	lsrs	r3, r3, #17
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a8a:	fb03 f202 	mul.w	r2, r3, r2
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e004      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	613b      	str	r3, [r7, #16]
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aaa:	613b      	str	r3, [r7, #16]
      break;
 8003aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aae:	693b      	ldr	r3, [r7, #16]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	007a1200 	.word	0x007a1200
 8003ac4:	08008058 	.word	0x08008058
 8003ac8:	08008068 	.word	0x08008068
 8003acc:	003d0900 	.word	0x003d0900

08003ad0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	; (8003b04 <RCC_Delay+0x34>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0a      	ldr	r2, [pc, #40]	; (8003b08 <RCC_Delay+0x38>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	0a5b      	lsrs	r3, r3, #9
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	fb02 f303 	mul.w	r3, r2, r3
 8003aea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003aec:	bf00      	nop
  }
  while (Delay --);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1e5a      	subs	r2, r3, #1
 8003af2:	60fa      	str	r2, [r7, #12]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1f9      	bne.n	8003aec <RCC_Delay+0x1c>
}
 8003af8:	bf00      	nop
 8003afa:	bf00      	nop
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr
 8003b04:	20000000 	.word	0x20000000
 8003b08:	10624dd3 	.word	0x10624dd3

08003b0c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d07d      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10d      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	4a4b      	ldr	r2, [pc, #300]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b42:	61d3      	str	r3, [r2, #28]
 8003b44:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b50:	2301      	movs	r3, #1
 8003b52:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b54:	4b46      	ldr	r3, [pc, #280]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d118      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b60:	4b43      	ldr	r3, [pc, #268]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a42      	ldr	r2, [pc, #264]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b6c:	f7fc fe14 	bl	8000798 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b72:	e008      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b74:	f7fc fe10 	bl	8000798 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	d901      	bls.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e06d      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b86:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d02e      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d027      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb0:	4b2e      	ldr	r3, [pc, #184]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bb8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bba:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc0:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bc6:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d014      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fc fddf 	bl	8000798 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bde:	f7fc fddb 	bl	8000798 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e036      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ee      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c00:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4917      	ldr	r1, [pc, #92]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c12:	7dfb      	ldrb	r3, [r7, #23]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d105      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c18:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	4a13      	ldr	r2, [pc, #76]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c22:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	490b      	ldr	r1, [pc, #44]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d008      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c4e:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	4904      	ldr	r1, [pc, #16]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
 8003c74:	42420440 	.word	0x42420440

08003c78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c78:	b084      	sub	sp, #16
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	f107 0014 	add.w	r0, r7, #20
 8003c86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bc80      	pop	{r7}
 8003c94:	b004      	add	sp, #16
 8003c96:	4770      	bx	lr

08003c98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ca8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003ccc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cd0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bc80      	pop	{r7}
 8003cf6:	4770      	bx	lr

08003cf8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bc80      	pop	{r7}
 8003d0e:	4770      	bx	lr

08003d10 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d10:	b084      	sub	sp, #16
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	f107 0014 	add.w	r0, r7, #20
 8003d1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bc80      	pop	{r7}
 8003d4c:	b004      	add	sp, #16
 8003d4e:	4770      	bx	lr

08003d50 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b09d      	sub	sp, #116	; 0x74
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	78db      	ldrb	r3, [r3, #3]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d81f      	bhi.n	8003dc2 <USB_ActivateEndpoint+0x72>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <USB_ActivateEndpoint+0x38>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003db5 	.word	0x08003db5
 8003d90:	08003dcb 	.word	0x08003dcb
 8003d94:	08003da7 	.word	0x08003da7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003da4:	e012      	b.n	8003dcc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003da6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003daa:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003dae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003db2:	e00b      	b.n	8003dcc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003db4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dbc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003dc0:	e004      	b.n	8003dcc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003dc8:	e000      	b.n	8003dcc <USB_ActivateEndpoint+0x7c>
      break;
 8003dca:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	441a      	add	r2, r3
 8003dd6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4413      	add	r3, r2
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	441a      	add	r2, r3
 8003e1c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	7b1b      	ldrb	r3, [r3, #12]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f040 8178 	bne.w	800412e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	785b      	ldrb	r3, [r3, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 8084 	beq.w	8003f50 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4413      	add	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	011a      	lsls	r2, r3, #4
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	88db      	ldrh	r3, [r3, #6]
 8003e70:	085b      	lsrs	r3, r3, #1
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	827b      	strh	r3, [r7, #18]
 8003e8a:	8a7b      	ldrh	r3, [r7, #18]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01b      	beq.n	8003ecc <USB_ActivateEndpoint+0x17c>
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eaa:	823b      	strh	r3, [r7, #16]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	441a      	add	r2, r3
 8003eb6:	8a3b      	ldrh	r3, [r7, #16]
 8003eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	78db      	ldrb	r3, [r3, #3]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d020      	beq.n	8003f16 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eea:	81bb      	strh	r3, [r7, #12]
 8003eec:	89bb      	ldrh	r3, [r7, #12]
 8003eee:	f083 0320 	eor.w	r3, r3, #32
 8003ef2:	81bb      	strh	r3, [r7, #12]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	89bb      	ldrh	r3, [r7, #12]
 8003f00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	8013      	strh	r3, [r2, #0]
 8003f14:	e2d5      	b.n	80044c2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2c:	81fb      	strh	r3, [r7, #14]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	441a      	add	r2, r3
 8003f38:	89fb      	ldrh	r3, [r7, #14]
 8003f3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	8013      	strh	r3, [r2, #0]
 8003f4e:	e2b8      	b.n	80044c2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	633b      	str	r3, [r7, #48]	; 0x30
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	4413      	add	r3, r2
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	011a      	lsls	r2, r3, #4
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	88db      	ldrh	r3, [r3, #6]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	461a      	mov	r2, r3
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	4413      	add	r3, r2
 8003f96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	011a      	lsls	r2, r3, #4
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb6:	801a      	strh	r2, [r3, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	2b3e      	cmp	r3, #62	; 0x3e
 8003fbe:	d91d      	bls.n	8003ffc <USB_ActivateEndpoint+0x2ac>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	095b      	lsrs	r3, r3, #5
 8003fc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <USB_ActivateEndpoint+0x28a>
 8003fd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	029b      	lsls	r3, r3, #10
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	801a      	strh	r2, [r3, #0]
 8003ffa:	e026      	b.n	800404a <USB_ActivateEndpoint+0x2fa>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10a      	bne.n	800401a <USB_ActivateEndpoint+0x2ca>
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	b29b      	uxth	r3, r3
 800400a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004012:	b29a      	uxth	r2, r3
 8004014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	e017      	b.n	800404a <USB_ActivateEndpoint+0x2fa>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	085b      	lsrs	r3, r3, #1
 8004020:	66bb      	str	r3, [r7, #104]	; 0x68
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <USB_ActivateEndpoint+0x2e4>
 800402e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004030:	3301      	adds	r3, #1
 8004032:	66bb      	str	r3, [r7, #104]	; 0x68
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	b29a      	uxth	r2, r3
 800403a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800403c:	b29b      	uxth	r3, r3
 800403e:	029b      	lsls	r3, r3, #10
 8004040:	b29b      	uxth	r3, r3
 8004042:	4313      	orrs	r3, r2
 8004044:	b29a      	uxth	r2, r3
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	847b      	strh	r3, [r7, #34]	; 0x22
 8004058:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800405a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01b      	beq.n	800409a <USB_ActivateEndpoint+0x34a>
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	b29b      	uxth	r3, r3
 8004070:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004078:	843b      	strh	r3, [r7, #32]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	441a      	add	r2, r3
 8004084:	8c3b      	ldrh	r3, [r7, #32]
 8004086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800408a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800408e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004096:	b29b      	uxth	r3, r3
 8004098:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d124      	bne.n	80040ec <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b8:	83bb      	strh	r3, [r7, #28]
 80040ba:	8bbb      	ldrh	r3, [r7, #28]
 80040bc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040c0:	83bb      	strh	r3, [r7, #28]
 80040c2:	8bbb      	ldrh	r3, [r7, #28]
 80040c4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040c8:	83bb      	strh	r3, [r7, #28]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	8bbb      	ldrh	r3, [r7, #28]
 80040d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	8013      	strh	r3, [r2, #0]
 80040ea:	e1ea      	b.n	80044c2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	83fb      	strh	r3, [r7, #30]
 8004104:	8bfb      	ldrh	r3, [r7, #30]
 8004106:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800410a:	83fb      	strh	r3, [r7, #30]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	441a      	add	r2, r3
 8004116:	8bfb      	ldrh	r3, [r7, #30]
 8004118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800411c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004128:	b29b      	uxth	r3, r3
 800412a:	8013      	strh	r3, [r2, #0]
 800412c:	e1c9      	b.n	80044c2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	78db      	ldrb	r3, [r3, #3]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d11e      	bne.n	8004174 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	b29b      	uxth	r3, r3
 8004144:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	441a      	add	r2, r3
 800415a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800415e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004166:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800416a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800416e:	b29b      	uxth	r3, r3
 8004170:	8013      	strh	r3, [r2, #0]
 8004172:	e01d      	b.n	80041b0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	441a      	add	r2, r3
 8004198:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800419c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c0:	4413      	add	r3, r2
 80041c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	011a      	lsls	r2, r3, #4
 80041ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	891b      	ldrh	r3, [r3, #8]
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	b29b      	uxth	r3, r3
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	657b      	str	r3, [r7, #84]	; 0x54
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	461a      	mov	r2, r3
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f4:	4413      	add	r3, r2
 80041f6:	657b      	str	r3, [r7, #84]	; 0x54
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	011a      	lsls	r2, r3, #4
 80041fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004200:	4413      	add	r3, r2
 8004202:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004206:	653b      	str	r3, [r7, #80]	; 0x50
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	895b      	ldrh	r3, [r3, #10]
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	b29b      	uxth	r3, r3
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004216:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	785b      	ldrb	r3, [r3, #1]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f040 8093 	bne.w	8004348 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004232:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01b      	beq.n	8004276 <USB_ActivateEndpoint+0x526>
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b29b      	uxth	r3, r3
 800424c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004250:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004254:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	441a      	add	r2, r3
 8004260:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800426e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004272:	b29b      	uxth	r3, r3
 8004274:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004284:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01b      	beq.n	80042c6 <USB_ActivateEndpoint+0x576>
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a4:	877b      	strh	r3, [r7, #58]	; 0x3a
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	441a      	add	r2, r3
 80042b0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80042b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042be:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80042de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042e0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80042e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80042e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042e8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	441a      	add	r2, r3
 80042f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800430a:	b29b      	uxth	r3, r3
 800430c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	b29b      	uxth	r3, r3
 800431c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004324:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	441a      	add	r2, r3
 8004330:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004332:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004336:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800433a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800433e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004342:	b29b      	uxth	r3, r3
 8004344:	8013      	strh	r3, [r2, #0]
 8004346:	e0bc      	b.n	80044c2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004358:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800435c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d01d      	beq.n	80043a0 <USB_ActivateEndpoint+0x650>
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4413      	add	r3, r2
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	b29b      	uxth	r3, r3
 8004372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	441a      	add	r2, r3
 8004388:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800438c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439c:	b29b      	uxth	r3, r3
 800439e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80043b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80043b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01d      	beq.n	80043f8 <USB_ActivateEndpoint+0x6a8>
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	441a      	add	r2, r3
 80043e0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80043e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	78db      	ldrb	r3, [r3, #3]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d024      	beq.n	800444a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004416:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800441a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800441e:	f083 0320 	eor.w	r3, r3, #32
 8004422:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	441a      	add	r2, r3
 8004430:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004444:	b29b      	uxth	r3, r3
 8004446:	8013      	strh	r3, [r2, #0]
 8004448:	e01d      	b.n	8004486 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004460:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004472:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004476:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800447a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004482:	b29b      	uxth	r3, r3
 8004484:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	b29b      	uxth	r3, r3
 8004494:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	441a      	add	r2, r3
 80044aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80044ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044be:	b29b      	uxth	r3, r3
 80044c0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80044c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3774      	adds	r7, #116	; 0x74
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b08d      	sub	sp, #52	; 0x34
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	7b1b      	ldrb	r3, [r3, #12]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f040 808e 	bne.w	8004600 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	785b      	ldrb	r3, [r3, #1]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d044      	beq.n	8004576 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	81bb      	strh	r3, [r7, #12]
 80044fa:	89bb      	ldrh	r3, [r7, #12]
 80044fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <USB_DeactivateEndpoint+0x6c>
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800451a:	817b      	strh	r3, [r7, #10]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	897b      	ldrh	r3, [r7, #10]
 8004528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004534:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004538:	b29b      	uxth	r3, r3
 800453a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	b29b      	uxth	r3, r3
 800454a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004552:	813b      	strh	r3, [r7, #8]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	441a      	add	r2, r3
 800455e:	893b      	ldrh	r3, [r7, #8]
 8004560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800456c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004570:	b29b      	uxth	r3, r3
 8004572:	8013      	strh	r3, [r2, #0]
 8004574:	e192      	b.n	800489c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	827b      	strh	r3, [r7, #18]
 8004584:	8a7b      	ldrh	r3, [r7, #18]
 8004586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01b      	beq.n	80045c6 <USB_DeactivateEndpoint+0xf6>
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	4413      	add	r3, r2
 8004598:	881b      	ldrh	r3, [r3, #0]
 800459a:	b29b      	uxth	r3, r3
 800459c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045a4:	823b      	strh	r3, [r7, #16]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	441a      	add	r2, r3
 80045b0:	8a3b      	ldrh	r3, [r7, #16]
 80045b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045dc:	81fb      	strh	r3, [r7, #14]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	441a      	add	r2, r3
 80045e8:	89fb      	ldrh	r3, [r7, #14]
 80045ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8013      	strh	r3, [r2, #0]
 80045fe:	e14d      	b.n	800489c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f040 80a5 	bne.w	8004754 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	881b      	ldrh	r3, [r3, #0]
 8004616:	843b      	strh	r3, [r7, #32]
 8004618:	8c3b      	ldrh	r3, [r7, #32]
 800461a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01b      	beq.n	800465a <USB_DeactivateEndpoint+0x18a>
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	b29b      	uxth	r3, r3
 8004630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004634:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004638:	83fb      	strh	r3, [r7, #30]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	441a      	add	r2, r3
 8004644:	8bfb      	ldrh	r3, [r7, #30]
 8004646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004656:	b29b      	uxth	r3, r3
 8004658:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	83bb      	strh	r3, [r7, #28]
 8004668:	8bbb      	ldrh	r3, [r7, #28]
 800466a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01b      	beq.n	80046aa <USB_DeactivateEndpoint+0x1da>
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004688:	837b      	strh	r3, [r7, #26]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	8b7b      	ldrh	r3, [r7, #26]
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	833b      	strh	r3, [r7, #24]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	441a      	add	r2, r3
 80046cc:	8b3b      	ldrh	r3, [r7, #24]
 80046ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046de:	b29b      	uxth	r3, r3
 80046e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f8:	82fb      	strh	r3, [r7, #22]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	441a      	add	r2, r3
 8004704:	8afb      	ldrh	r3, [r7, #22]
 8004706:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800470a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004716:	b29b      	uxth	r3, r3
 8004718:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800472c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004730:	82bb      	strh	r3, [r7, #20]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	8abb      	ldrh	r3, [r7, #20]
 800473e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800474e:	b29b      	uxth	r3, r3
 8004750:	8013      	strh	r3, [r2, #0]
 8004752:	e0a3      	b.n	800489c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004762:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01b      	beq.n	80047a4 <USB_DeactivateEndpoint+0x2d4>
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	881b      	ldrh	r3, [r3, #0]
 8004778:	b29b      	uxth	r3, r3
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800479c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80047b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <USB_DeactivateEndpoint+0x324>
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29b      	uxth	r3, r3
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800480a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	441a      	add	r2, r3
 8004816:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004818:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800481c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004820:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004828:	b29b      	uxth	r3, r3
 800482a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800483e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004842:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	441a      	add	r2, r3
 800484e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004854:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800485c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004860:	b29b      	uxth	r3, r3
 8004862:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4413      	add	r3, r2
 800486e:	881b      	ldrh	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487a:	847b      	strh	r3, [r7, #34]	; 0x22
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004898:	b29b      	uxth	r3, r3
 800489a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3734      	adds	r7, #52	; 0x34
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bc80      	pop	{r7}
 80048a6:	4770      	bx	lr

080048a8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b0c2      	sub	sp, #264	; 0x108
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048b6:	6018      	str	r0, [r3, #0]
 80048b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048c0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	785b      	ldrb	r3, [r3, #1]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	f040 86b7 	bne.w	8005642 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80048d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d908      	bls.n	8004902 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80048f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004900:	e007      	b.n	8004912 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004902:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004906:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	7b1b      	ldrb	r3, [r3, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d13a      	bne.n	8004998 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6959      	ldr	r1, [r3, #20]
 800492e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	88da      	ldrh	r2, [r3, #6]
 800493a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800493e:	b29b      	uxth	r3, r3
 8004940:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004944:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004948:	6800      	ldr	r0, [r0, #0]
 800494a:	f001 fc9c 	bl	8006286 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800494e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800495e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004968:	b29b      	uxth	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	011a      	lsls	r2, r3, #4
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4413      	add	r3, r2
 8004984:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	801a      	strh	r2, [r3, #0]
 8004994:	f000 be1f 	b.w	80055d6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800499c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	78db      	ldrb	r3, [r3, #3]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	f040 8462 	bne.w	800526e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80049aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	f240 83df 	bls.w	8005186 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80049c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80049f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	441a      	add	r2, r3
 8004a0c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a18:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6a1a      	ldr	r2, [r3, #32]
 8004a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a34:	1ad2      	subs	r2, r2, r3
 8004a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 81c7 	beq.w	8004df8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004a6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	633b      	str	r3, [r7, #48]	; 0x30
 8004a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	785b      	ldrb	r3, [r3, #1]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d177      	bne.n	8004b76 <USB_EPStartXfer+0x2ce>
 8004a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa6:	4413      	add	r3, r2
 8004aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	011a      	lsls	r2, r3, #4
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	4413      	add	r3, r2
 8004abc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	801a      	strh	r2, [r3, #0]
 8004ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ad6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ad8:	d921      	bls.n	8004b1e <USB_EPStartXfer+0x276>
 8004ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ade:	095b      	lsrs	r3, r3, #5
 8004ae0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004ae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d104      	bne.n	8004afa <USB_EPStartXfer+0x252>
 8004af0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004af4:	3b01      	subs	r3, #1
 8004af6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	029b      	lsls	r3, r3, #10
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e050      	b.n	8004bc0 <USB_EPStartXfer+0x318>
 8004b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <USB_EPStartXfer+0x294>
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	881b      	ldrh	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	e041      	b.n	8004bc0 <USB_EPStartXfer+0x318>
 8004b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b40:	085b      	lsrs	r3, r3, #1
 8004b42:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d004      	beq.n	8004b5c <USB_EPStartXfer+0x2b4>
 8004b52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b56:	3301      	adds	r3, #1
 8004b58:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	029b      	lsls	r3, r3, #10
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	801a      	strh	r2, [r3, #0]
 8004b74:	e024      	b.n	8004bc0 <USB_EPStartXfer+0x318>
 8004b76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	785b      	ldrb	r3, [r3, #1]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d11c      	bne.n	8004bc0 <USB_EPStartXfer+0x318>
 8004b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	461a      	mov	r2, r3
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	4413      	add	r3, r2
 8004b9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	011a      	lsls	r2, r3, #4
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	4413      	add	r3, r2
 8004bb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	895b      	ldrh	r3, [r3, #10]
 8004bcc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6959      	ldr	r1, [r3, #20]
 8004bdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004be6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004bea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004bee:	6800      	ldr	r0, [r0, #0]
 8004bf0:	f001 fb49 	bl	8006286 <USB_WritePMA>
            ep->xfer_buff += len;
 8004bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	695a      	ldr	r2, [r3, #20]
 8004c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c04:	441a      	add	r2, r3
 8004c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6a1a      	ldr	r2, [r3, #32]
 8004c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d90f      	bls.n	8004c4e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8004c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6a1a      	ldr	r2, [r3, #32]
 8004c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c3e:	1ad2      	subs	r2, r2, r3
 8004c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	621a      	str	r2, [r3, #32]
 8004c4c:	e00e      	b.n	8004c6c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d177      	bne.n	8004d6c <USB_EPStartXfer+0x4c4>
 8004c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ca4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	011a      	lsls	r2, r3, #4
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	801a      	strh	r2, [r3, #0]
 8004cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ccc:	2b3e      	cmp	r3, #62	; 0x3e
 8004cce:	d921      	bls.n	8004d14 <USB_EPStartXfer+0x46c>
 8004cd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cd4:	095b      	lsrs	r3, r3, #5
 8004cd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <USB_EPStartXfer+0x448>
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	029b      	lsls	r3, r3, #10
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	4313      	orrs	r3, r2
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	801a      	strh	r2, [r3, #0]
 8004d12:	e056      	b.n	8004dc2 <USB_EPStartXfer+0x51a>
 8004d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <USB_EPStartXfer+0x48a>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	801a      	strh	r2, [r3, #0]
 8004d30:	e047      	b.n	8004dc2 <USB_EPStartXfer+0x51a>
 8004d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d004      	beq.n	8004d52 <USB_EPStartXfer+0x4aa>
 8004d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	029b      	lsls	r3, r3, #10
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	4313      	orrs	r3, r2
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	801a      	strh	r2, [r3, #0]
 8004d6a:	e02a      	b.n	8004dc2 <USB_EPStartXfer+0x51a>
 8004d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	785b      	ldrb	r3, [r3, #1]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d122      	bne.n	8004dc2 <USB_EPStartXfer+0x51a>
 8004d7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	623b      	str	r3, [r7, #32]
 8004da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	011a      	lsls	r2, r3, #4
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	4413      	add	r3, r2
 8004db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	891b      	ldrh	r3, [r3, #8]
 8004dce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6959      	ldr	r1, [r3, #20]
 8004dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004de8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004dec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004df0:	6800      	ldr	r0, [r0, #0]
 8004df2:	f001 fa48 	bl	8006286 <USB_WritePMA>
 8004df6:	e3ee      	b.n	80055d6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d177      	bne.n	8004ef8 <USB_EPStartXfer+0x650>
 8004e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	461a      	mov	r2, r3
 8004e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e28:	4413      	add	r3, r2
 8004e2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	011a      	lsls	r2, r3, #4
 8004e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e3c:	4413      	add	r3, r2
 8004e3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e42:	647b      	str	r3, [r7, #68]	; 0x44
 8004e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e52:	801a      	strh	r2, [r3, #0]
 8004e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e58:	2b3e      	cmp	r3, #62	; 0x3e
 8004e5a:	d921      	bls.n	8004ea0 <USB_EPStartXfer+0x5f8>
 8004e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e60:	095b      	lsrs	r3, r3, #5
 8004e62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d104      	bne.n	8004e7c <USB_EPStartXfer+0x5d4>
 8004e72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e76:	3b01      	subs	r3, #1
 8004e78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e7e:	881b      	ldrh	r3, [r3, #0]
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	029b      	lsls	r3, r3, #10
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9c:	801a      	strh	r2, [r3, #0]
 8004e9e:	e056      	b.n	8004f4e <USB_EPStartXfer+0x6a6>
 8004ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <USB_EPStartXfer+0x616>
 8004ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eba:	801a      	strh	r2, [r3, #0]
 8004ebc:	e047      	b.n	8004f4e <USB_EPStartXfer+0x6a6>
 8004ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d004      	beq.n	8004ede <USB_EPStartXfer+0x636>
 8004ed4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	029b      	lsls	r3, r3, #10
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	e02a      	b.n	8004f4e <USB_EPStartXfer+0x6a6>
 8004ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	785b      	ldrb	r3, [r3, #1]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d122      	bne.n	8004f4e <USB_EPStartXfer+0x6a6>
 8004f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	653b      	str	r3, [r7, #80]	; 0x50
 8004f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	461a      	mov	r2, r3
 8004f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f28:	4413      	add	r3, r2
 8004f2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	011a      	lsls	r2, r3, #4
 8004f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	891b      	ldrh	r3, [r3, #8]
 8004f5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6959      	ldr	r1, [r3, #20]
 8004f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f74:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f78:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f7c:	6800      	ldr	r0, [r0, #0]
 8004f7e:	f001 f982 	bl	8006286 <USB_WritePMA>
            ep->xfer_buff += len;
 8004f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695a      	ldr	r2, [r3, #20]
 8004f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f92:	441a      	add	r2, r3
 8004f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	6a1a      	ldr	r2, [r3, #32]
 8004fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d90f      	bls.n	8004fdc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6a1a      	ldr	r2, [r3, #32]
 8004fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fcc:	1ad2      	subs	r2, r2, r3
 8004fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	621a      	str	r2, [r3, #32]
 8004fda:	e00e      	b.n	8004ffa <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6a1b      	ldr	r3, [r3, #32]
 8004fe8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	643b      	str	r3, [r7, #64]	; 0x40
 8005006:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800500a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d177      	bne.n	8005106 <USB_EPStartXfer+0x85e>
 8005016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800501a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	63bb      	str	r3, [r7, #56]	; 0x38
 8005022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005026:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005030:	b29b      	uxth	r3, r3
 8005032:	461a      	mov	r2, r3
 8005034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005036:	4413      	add	r3, r2
 8005038:	63bb      	str	r3, [r7, #56]	; 0x38
 800503a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800503e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	011a      	lsls	r2, r3, #4
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	4413      	add	r3, r2
 800504c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505c:	b29a      	uxth	r2, r3
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005066:	2b3e      	cmp	r3, #62	; 0x3e
 8005068:	d921      	bls.n	80050ae <USB_EPStartXfer+0x806>
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800506e:	095b      	lsrs	r3, r3, #5
 8005070:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005074:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	2b00      	cmp	r3, #0
 800507e:	d104      	bne.n	800508a <USB_EPStartXfer+0x7e2>
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	3b01      	subs	r3, #1
 8005086:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29a      	uxth	r2, r3
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	b29b      	uxth	r3, r3
 8005096:	029b      	lsls	r3, r3, #10
 8005098:	b29b      	uxth	r3, r3
 800509a:	4313      	orrs	r3, r2
 800509c:	b29b      	uxth	r3, r3
 800509e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	e050      	b.n	8005150 <USB_EPStartXfer+0x8a8>
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d10a      	bne.n	80050cc <USB_EPStartXfer+0x824>
 80050b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c8:	801a      	strh	r2, [r3, #0]
 80050ca:	e041      	b.n	8005150 <USB_EPStartXfer+0x8a8>
 80050cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80050d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d004      	beq.n	80050ec <USB_EPStartXfer+0x844>
 80050e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e6:	3301      	adds	r3, #1
 80050e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80050ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	029b      	lsls	r3, r3, #10
 80050fa:	b29b      	uxth	r3, r3
 80050fc:	4313      	orrs	r3, r2
 80050fe:	b29a      	uxth	r2, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	801a      	strh	r2, [r3, #0]
 8005104:	e024      	b.n	8005150 <USB_EPStartXfer+0x8a8>
 8005106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800510a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	785b      	ldrb	r3, [r3, #1]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d11c      	bne.n	8005150 <USB_EPStartXfer+0x8a8>
 8005116:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005124:	b29b      	uxth	r3, r3
 8005126:	461a      	mov	r2, r3
 8005128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800512a:	4413      	add	r3, r2
 800512c:	643b      	str	r3, [r7, #64]	; 0x40
 800512e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	011a      	lsls	r2, r3, #4
 800513c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513e:	4413      	add	r3, r2
 8005140:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800514a:	b29a      	uxth	r2, r3
 800514c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	895b      	ldrh	r3, [r3, #10]
 800515c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6959      	ldr	r1, [r3, #20]
 800516c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005170:	b29b      	uxth	r3, r3
 8005172:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005176:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800517a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800517e:	6800      	ldr	r0, [r0, #0]
 8005180:	f001 f881 	bl	8006286 <USB_WritePMA>
 8005184:	e227      	b.n	80055d6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800518a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800519a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80051b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051bc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80051c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80051de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80051f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520c:	b29b      	uxth	r3, r3
 800520e:	461a      	mov	r2, r3
 8005210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005212:	4413      	add	r3, r2
 8005214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	011a      	lsls	r2, r3, #4
 8005224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005226:	4413      	add	r3, r2
 8005228:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800522c:	65bb      	str	r3, [r7, #88]	; 0x58
 800522e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005232:	b29a      	uxth	r2, r3
 8005234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005236:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005238:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	891b      	ldrh	r3, [r3, #8]
 8005244:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6959      	ldr	r1, [r3, #20]
 8005254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005258:	b29b      	uxth	r3, r3
 800525a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800525e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005262:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005266:	6800      	ldr	r0, [r0, #0]
 8005268:	f001 f80d 	bl	8006286 <USB_WritePMA>
 800526c:	e1b3      	b.n	80055d6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800526e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6a1a      	ldr	r2, [r3, #32]
 800527a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800527e:	1ad2      	subs	r2, r2, r3
 8005280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800528c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005290:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800529a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 80c6 	beq.w	8005440 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	673b      	str	r3, [r7, #112]	; 0x70
 80052c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	785b      	ldrb	r3, [r3, #1]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d177      	bne.n	80053c0 <USB_EPStartXfer+0xb18>
 80052d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	66bb      	str	r3, [r7, #104]	; 0x68
 80052dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	461a      	mov	r2, r3
 80052ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052f0:	4413      	add	r3, r2
 80052f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80052f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	011a      	lsls	r2, r3, #4
 8005302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005304:	4413      	add	r3, r2
 8005306:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800530a:	667b      	str	r3, [r7, #100]	; 0x64
 800530c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005316:	b29a      	uxth	r2, r3
 8005318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800531a:	801a      	strh	r2, [r3, #0]
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005320:	2b3e      	cmp	r3, #62	; 0x3e
 8005322:	d921      	bls.n	8005368 <USB_EPStartXfer+0xac0>
 8005324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800532e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2b00      	cmp	r3, #0
 8005338:	d104      	bne.n	8005344 <USB_EPStartXfer+0xa9c>
 800533a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800533e:	3b01      	subs	r3, #1
 8005340:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29a      	uxth	r2, r3
 800534a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800534e:	b29b      	uxth	r3, r3
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	b29b      	uxth	r3, r3
 8005354:	4313      	orrs	r3, r2
 8005356:	b29b      	uxth	r3, r3
 8005358:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800535c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005360:	b29a      	uxth	r2, r3
 8005362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	e050      	b.n	800540a <USB_EPStartXfer+0xb62>
 8005368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10a      	bne.n	8005386 <USB_EPStartXfer+0xade>
 8005370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800537a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537e:	b29a      	uxth	r2, r3
 8005380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005382:	801a      	strh	r2, [r3, #0]
 8005384:	e041      	b.n	800540a <USB_EPStartXfer+0xb62>
 8005386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d004      	beq.n	80053a6 <USB_EPStartXfer+0xafe>
 800539c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053a0:	3301      	adds	r3, #1
 80053a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80053a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	029b      	lsls	r3, r3, #10
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053bc:	801a      	strh	r2, [r3, #0]
 80053be:	e024      	b.n	800540a <USB_EPStartXfer+0xb62>
 80053c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	785b      	ldrb	r3, [r3, #1]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d11c      	bne.n	800540a <USB_EPStartXfer+0xb62>
 80053d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053de:	b29b      	uxth	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053e4:	4413      	add	r3, r2
 80053e6:	673b      	str	r3, [r7, #112]	; 0x70
 80053e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	011a      	lsls	r2, r3, #4
 80053f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80053f8:	4413      	add	r3, r2
 80053fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005404:	b29a      	uxth	r2, r3
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800540a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800540e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	895b      	ldrh	r3, [r3, #10]
 8005416:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800541a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6959      	ldr	r1, [r3, #20]
 8005426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800542a:	b29b      	uxth	r3, r3
 800542c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005430:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005434:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005438:	6800      	ldr	r0, [r0, #0]
 800543a:	f000 ff24 	bl	8006286 <USB_WritePMA>
 800543e:	e0ca      	b.n	80055d6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	785b      	ldrb	r3, [r3, #1]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d177      	bne.n	8005540 <USB_EPStartXfer+0xc98>
 8005450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800545c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005470:	4413      	add	r3, r2
 8005472:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	011a      	lsls	r2, r3, #4
 8005482:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005484:	4413      	add	r3, r2
 8005486:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800548a:	67bb      	str	r3, [r7, #120]	; 0x78
 800548c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005496:	b29a      	uxth	r2, r3
 8005498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a0:	2b3e      	cmp	r3, #62	; 0x3e
 80054a2:	d921      	bls.n	80054e8 <USB_EPStartXfer+0xc40>
 80054a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <USB_EPStartXfer+0xc1c>
 80054ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054be:	3b01      	subs	r3, #1
 80054c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80054c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	029b      	lsls	r3, r3, #10
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	4313      	orrs	r3, r2
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e05c      	b.n	80055a2 <USB_EPStartXfer+0xcfa>
 80054e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <USB_EPStartXfer+0xc5e>
 80054f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fe:	b29a      	uxth	r2, r3
 8005500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e04d      	b.n	80055a2 <USB_EPStartXfer+0xcfa>
 8005506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <USB_EPStartXfer+0xc7e>
 800551c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005520:	3301      	adds	r3, #1
 8005522:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005528:	881b      	ldrh	r3, [r3, #0]
 800552a:	b29a      	uxth	r2, r3
 800552c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005530:	b29b      	uxth	r3, r3
 8005532:	029b      	lsls	r3, r3, #10
 8005534:	b29b      	uxth	r3, r3
 8005536:	4313      	orrs	r3, r2
 8005538:	b29a      	uxth	r2, r3
 800553a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	e030      	b.n	80055a2 <USB_EPStartXfer+0xcfa>
 8005540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	785b      	ldrb	r3, [r3, #1]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d128      	bne.n	80055a2 <USB_EPStartXfer+0xcfa>
 8005550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800555e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005562:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800556c:	b29b      	uxth	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005574:	4413      	add	r3, r2
 8005576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800557a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	011a      	lsls	r2, r3, #4
 8005588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800558c:	4413      	add	r3, r2
 800558e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005592:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559a:	b29a      	uxth	r2, r3
 800559c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055a0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80055a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	891b      	ldrh	r3, [r3, #8]
 80055ae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6959      	ldr	r1, [r3, #20]
 80055be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80055c8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80055cc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80055d0:	6800      	ldr	r0, [r0, #0]
 80055d2:	f000 fe58 	bl	8006286 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055fc:	817b      	strh	r3, [r7, #10]
 80055fe:	897b      	ldrh	r3, [r7, #10]
 8005600:	f083 0310 	eor.w	r3, r3, #16
 8005604:	817b      	strh	r3, [r7, #10]
 8005606:	897b      	ldrh	r3, [r7, #10]
 8005608:	f083 0320 	eor.w	r3, r3, #32
 800560c:	817b      	strh	r3, [r7, #10]
 800560e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800561c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	441a      	add	r2, r3
 8005628:	897b      	ldrh	r3, [r7, #10]
 800562a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800562e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800563a:	b29b      	uxth	r3, r3
 800563c:	8013      	strh	r3, [r2, #0]
 800563e:	f000 bcde 	b.w	8005ffe <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	7b1b      	ldrb	r3, [r3, #12]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 80bb 	bne.w	80057ca <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	429a      	cmp	r2, r3
 800566e:	d917      	bls.n	80056a0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005684:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005690:	1ad2      	subs	r2, r2, r3
 8005692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	619a      	str	r2, [r3, #24]
 800569e:	e00e      	b.n	80056be <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80056a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80056b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2200      	movs	r2, #0
 80056bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056da:	b29b      	uxth	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056e2:	4413      	add	r3, r2
 80056e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	011a      	lsls	r2, r3, #4
 80056f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056fa:	4413      	add	r3, r2
 80056fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005700:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005704:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005710:	b29a      	uxth	r2, r3
 8005712:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800571c:	2b3e      	cmp	r3, #62	; 0x3e
 800571e:	d924      	bls.n	800576a <USB_EPStartXfer+0xec2>
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005724:	095b      	lsrs	r3, r3, #5
 8005726:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800572a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800572e:	f003 031f 	and.w	r3, r3, #31
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <USB_EPStartXfer+0xe98>
 8005736:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800573a:	3b01      	subs	r3, #1
 800573c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800574c:	b29b      	uxth	r3, r3
 800574e:	029b      	lsls	r3, r3, #10
 8005750:	b29b      	uxth	r3, r3
 8005752:	4313      	orrs	r3, r2
 8005754:	b29b      	uxth	r3, r3
 8005756:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800575a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800575e:	b29a      	uxth	r2, r3
 8005760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	f000 bc10 	b.w	8005f8a <USB_EPStartXfer+0x16e2>
 800576a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10c      	bne.n	800578c <USB_EPStartXfer+0xee4>
 8005772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29b      	uxth	r3, r3
 800577a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005782:	b29a      	uxth	r2, r3
 8005784:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	e3fe      	b.n	8005f8a <USB_EPStartXfer+0x16e2>
 800578c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d004      	beq.n	80057ac <USB_EPStartXfer+0xf04>
 80057a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057a6:	3301      	adds	r3, #1
 80057a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	b29b      	uxth	r3, r3
 80057be:	4313      	orrs	r3, r2
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	e3df      	b.n	8005f8a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80057ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	78db      	ldrb	r3, [r3, #3]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	f040 8218 	bne.w	8005c0c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80057dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f040 809d 	bne.w	8005928 <USB_EPStartXfer+0x1080>
 80057ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005800:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580a:	b29b      	uxth	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005812:	4413      	add	r3, r2
 8005814:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800581c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	011a      	lsls	r2, r3, #4
 8005826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800582a:	4413      	add	r3, r2
 800582c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005830:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005840:	b29a      	uxth	r2, r3
 8005842:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005846:	801a      	strh	r2, [r3, #0]
 8005848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b3e      	cmp	r3, #62	; 0x3e
 8005856:	d92b      	bls.n	80058b0 <USB_EPStartXfer+0x1008>
 8005858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800585c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800586a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800586e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 031f 	and.w	r3, r3, #31
 800587a:	2b00      	cmp	r3, #0
 800587c:	d104      	bne.n	8005888 <USB_EPStartXfer+0xfe0>
 800587e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005882:	3b01      	subs	r3, #1
 8005884:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	b29a      	uxth	r2, r3
 8005890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29b      	uxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b29b      	uxth	r3, r3
 800589e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058a6:	b29a      	uxth	r2, r3
 80058a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058ac:	801a      	strh	r2, [r3, #0]
 80058ae:	e070      	b.n	8005992 <USB_EPStartXfer+0x10ea>
 80058b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10c      	bne.n	80058da <USB_EPStartXfer+0x1032>
 80058c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80058d6:	801a      	strh	r2, [r3, #0]
 80058d8:	e05b      	b.n	8005992 <USB_EPStartXfer+0x10ea>
 80058da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	085b      	lsrs	r3, r3, #1
 80058e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80058ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	f003 0301 	and.w	r3, r3, #1
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <USB_EPStartXfer+0x1062>
 8005900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005904:	3301      	adds	r3, #1
 8005906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800590a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29a      	uxth	r2, r3
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	b29b      	uxth	r3, r3
 8005918:	029b      	lsls	r3, r3, #10
 800591a:	b29b      	uxth	r3, r3
 800591c:	4313      	orrs	r3, r2
 800591e:	b29a      	uxth	r2, r3
 8005920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005924:	801a      	strh	r2, [r3, #0]
 8005926:	e034      	b.n	8005992 <USB_EPStartXfer+0x10ea>
 8005928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800592c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d12c      	bne.n	8005992 <USB_EPStartXfer+0x10ea>
 8005938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800593c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800594a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005954:	b29b      	uxth	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800595c:	4413      	add	r3, r2
 800595e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	011a      	lsls	r2, r3, #4
 8005970:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005974:	4413      	add	r3, r2
 8005976:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800597a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800597e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	b29a      	uxth	r2, r3
 800598c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005990:	801a      	strh	r2, [r3, #0]
 8005992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005996:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80059a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	785b      	ldrb	r3, [r3, #1]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f040 809d 	bne.w	8005aec <USB_EPStartXfer+0x1244>
 80059b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	461a      	mov	r2, r3
 80059d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059d6:	4413      	add	r3, r2
 80059d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	011a      	lsls	r2, r3, #4
 80059ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80059ee:	4413      	add	r3, r2
 80059f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a0a:	801a      	strh	r2, [r3, #0]
 8005a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b3e      	cmp	r3, #62	; 0x3e
 8005a1a:	d92b      	bls.n	8005a74 <USB_EPStartXfer+0x11cc>
 8005a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <USB_EPStartXfer+0x11a4>
 8005a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a46:	3b01      	subs	r3, #1
 8005a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e069      	b.n	8005b48 <USB_EPStartXfer+0x12a0>
 8005a74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10c      	bne.n	8005a9e <USB_EPStartXfer+0x11f6>
 8005a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	e054      	b.n	8005b48 <USB_EPStartXfer+0x12a0>
 8005a9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005aa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	085b      	lsrs	r3, r3, #1
 8005aac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d004      	beq.n	8005ace <USB_EPStartXfer+0x1226>
 8005ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ac8:	3301      	adds	r3, #1
 8005aca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	e02d      	b.n	8005b48 <USB_EPStartXfer+0x12a0>
 8005aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	785b      	ldrb	r3, [r3, #1]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d125      	bne.n	8005b48 <USB_EPStartXfer+0x12a0>
 8005afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b12:	4413      	add	r3, r2
 8005b14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	011a      	lsls	r2, r3, #4
 8005b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b46:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f000 8218 	beq.w	8005f8a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b7a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <USB_EPStartXfer+0x12ea>
 8005b86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d10d      	bne.n	8005bae <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b92:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f040 81f5 	bne.w	8005f8a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005ba0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8005ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f040 81ee 	bne.w	8005f8a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005bae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	441a      	add	r2, r3
 8005bf2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	8013      	strh	r3, [r2, #0]
 8005c0a:	e1be      	b.n	8005f8a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	78db      	ldrb	r3, [r3, #3]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	f040 81b4 	bne.w	8005f86 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d917      	bls.n	8005c6a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8005c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8005c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5a:	1ad2      	subs	r2, r2, r3
 8005c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	619a      	str	r2, [r3, #24]
 8005c68:	e00e      	b.n	8005c88 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8005c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8005c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2200      	movs	r2, #0
 8005c86:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	785b      	ldrb	r3, [r3, #1]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 8085 	bne.w	8005da4 <USB_EPStartXfer+0x14fc>
 8005c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf8:	2b3e      	cmp	r3, #62	; 0x3e
 8005cfa:	d923      	bls.n	8005d44 <USB_EPStartXfer+0x149c>
 8005cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d00:	095b      	lsrs	r3, r3, #5
 8005d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <USB_EPStartXfer+0x1474>
 8005d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d16:	3b01      	subs	r3, #1
 8005d18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d20:	881b      	ldrh	r3, [r3, #0]
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	029b      	lsls	r3, r3, #10
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	e060      	b.n	8005e06 <USB_EPStartXfer+0x155e>
 8005d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10c      	bne.n	8005d66 <USB_EPStartXfer+0x14be>
 8005d4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d50:	881b      	ldrh	r3, [r3, #0]
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d5c:	b29a      	uxth	r2, r3
 8005d5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e04f      	b.n	8005e06 <USB_EPStartXfer+0x155e>
 8005d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d6a:	085b      	lsrs	r3, r3, #1
 8005d6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <USB_EPStartXfer+0x14de>
 8005d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d80:	3301      	adds	r3, #1
 8005d82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	029b      	lsls	r3, r3, #10
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005da0:	801a      	strh	r2, [r3, #0]
 8005da2:	e030      	b.n	8005e06 <USB_EPStartXfer+0x155e>
 8005da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d128      	bne.n	8005e06 <USB_EPStartXfer+0x155e>
 8005db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005db8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dd8:	4413      	add	r3, r2
 8005dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	011a      	lsls	r2, r3, #4
 8005dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005df0:	4413      	add	r3, r2
 8005df2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005df6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e04:	801a      	strh	r2, [r3, #0]
 8005e06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 8085 	bne.w	8005f30 <USB_EPStartXfer+0x1688>
 8005e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	011a      	lsls	r2, r3, #4
 8005e5e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e62:	4413      	add	r3, r2
 8005e64:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e70:	881b      	ldrh	r3, [r3, #0]
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e7e:	801a      	strh	r2, [r3, #0]
 8005e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e84:	2b3e      	cmp	r3, #62	; 0x3e
 8005e86:	d923      	bls.n	8005ed0 <USB_EPStartXfer+0x1628>
 8005e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e96:	f003 031f 	and.w	r3, r3, #31
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <USB_EPStartXfer+0x1600>
 8005e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ea8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	029b      	lsls	r3, r3, #10
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	e05c      	b.n	8005f8a <USB_EPStartXfer+0x16e2>
 8005ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10c      	bne.n	8005ef2 <USB_EPStartXfer+0x164a>
 8005ed8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005edc:	881b      	ldrh	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005eee:	801a      	strh	r2, [r3, #0]
 8005ef0:	e04b      	b.n	8005f8a <USB_EPStartXfer+0x16e2>
 8005ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <USB_EPStartXfer+0x166a>
 8005f08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	029b      	lsls	r3, r3, #10
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	4313      	orrs	r3, r2
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f2c:	801a      	strh	r2, [r3, #0]
 8005f2e:	e02c      	b.n	8005f8a <USB_EPStartXfer+0x16e2>
 8005f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d124      	bne.n	8005f8a <USB_EPStartXfer+0x16e2>
 8005f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f56:	4413      	add	r3, r2
 8005f58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	011a      	lsls	r2, r3, #4
 8005f6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f6e:	4413      	add	r3, r2
 8005f70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e001      	b.n	8005f8a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e03a      	b.n	8006000 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005fb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fbc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005fc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fc4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fc8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	441a      	add	r2, r3
 8005fe6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}

0800600a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d020      	beq.n	800605e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006032:	81bb      	strh	r3, [r7, #12]
 8006034:	89bb      	ldrh	r3, [r7, #12]
 8006036:	f083 0310 	eor.w	r3, r3, #16
 800603a:	81bb      	strh	r3, [r7, #12]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	441a      	add	r2, r3
 8006046:	89bb      	ldrh	r3, [r7, #12]
 8006048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006058:	b29b      	uxth	r3, r3
 800605a:	8013      	strh	r3, [r2, #0]
 800605c:	e01f      	b.n	800609e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006074:	81fb      	strh	r3, [r7, #14]
 8006076:	89fb      	ldrh	r3, [r7, #14]
 8006078:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800607c:	81fb      	strh	r3, [r7, #14]
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	441a      	add	r2, r3
 8006088:	89fb      	ldrh	r3, [r7, #14]
 800608a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800608e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800609a:	b29b      	uxth	r3, r3
 800609c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr

080060aa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	7b1b      	ldrb	r3, [r3, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 809d 	bne.w	80061f8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	785b      	ldrb	r3, [r3, #1]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d04c      	beq.n	8006160 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	823b      	strh	r3, [r7, #16]
 80060d4:	8a3b      	ldrh	r3, [r7, #16]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01b      	beq.n	8006116 <USB_EPClearStall+0x6c>
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4413      	add	r3, r2
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f4:	81fb      	strh	r3, [r7, #14]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	441a      	add	r2, r3
 8006100:	89fb      	ldrh	r3, [r7, #14]
 8006102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006112:	b29b      	uxth	r3, r3
 8006114:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	78db      	ldrb	r3, [r3, #3]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d06c      	beq.n	80061f8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29b      	uxth	r3, r3
 800612c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006134:	81bb      	strh	r3, [r7, #12]
 8006136:	89bb      	ldrh	r3, [r7, #12]
 8006138:	f083 0320 	eor.w	r3, r3, #32
 800613c:	81bb      	strh	r3, [r7, #12]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	441a      	add	r2, r3
 8006148:	89bb      	ldrh	r3, [r7, #12]
 800614a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800614e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615a:	b29b      	uxth	r3, r3
 800615c:	8013      	strh	r3, [r2, #0]
 800615e:	e04b      	b.n	80061f8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	82fb      	strh	r3, [r7, #22]
 800616e:	8afb      	ldrh	r3, [r7, #22]
 8006170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01b      	beq.n	80061b0 <USB_EPClearStall+0x106>
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29b      	uxth	r3, r3
 8006186:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800618a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618e:	82bb      	strh	r3, [r7, #20]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	441a      	add	r2, r3
 800619a:	8abb      	ldrh	r3, [r7, #20]
 800619c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c6:	827b      	strh	r3, [r7, #18]
 80061c8:	8a7b      	ldrh	r3, [r7, #18]
 80061ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061ce:	827b      	strh	r3, [r7, #18]
 80061d0:	8a7b      	ldrh	r3, [r7, #18]
 80061d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061d6:	827b      	strh	r3, [r7, #18]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	8a7b      	ldrh	r3, [r7, #18]
 80061e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	371c      	adds	r7, #28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	460b      	mov	r3, r1
 800620e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d103      	bne.n	800621e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2280      	movs	r2, #128	; 0x80
 800621a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800621e:	2300      	movs	r3, #0
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	bc80      	pop	{r7}
 8006250:	4770      	bx	lr

08006252 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006260:	b29b      	uxth	r3, r3
 8006262:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006264:	68fb      	ldr	r3, [r7, #12]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr

08006270 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr

08006286 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006286:	b480      	push	{r7}
 8006288:	b08b      	sub	sp, #44	; 0x2c
 800628a:	af00      	add	r7, sp, #0
 800628c:	60f8      	str	r0, [r7, #12]
 800628e:	60b9      	str	r1, [r7, #8]
 8006290:	4611      	mov	r1, r2
 8006292:	461a      	mov	r2, r3
 8006294:	460b      	mov	r3, r1
 8006296:	80fb      	strh	r3, [r7, #6]
 8006298:	4613      	mov	r3, r2
 800629a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800629c:	88bb      	ldrh	r3, [r7, #4]
 800629e:	3301      	adds	r3, #1
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	005a      	lsls	r2, r3, #1
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062b8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24
 80062be:	e01e      	b.n	80062fe <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	3301      	adds	r3, #1
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	021b      	lsls	r3, r3, #8
 80062ce:	b21a      	sxth	r2, r3
 80062d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	b21b      	sxth	r3, r3
 80062d8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	8a7a      	ldrh	r2, [r7, #18]
 80062de:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	3302      	adds	r3, #2
 80062e4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	3302      	adds	r3, #2
 80062ea:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	3301      	adds	r3, #1
 80062f0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	3301      	adds	r3, #1
 80062f6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80062f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fa:	3b01      	subs	r3, #1
 80062fc:	627b      	str	r3, [r7, #36]	; 0x24
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1dd      	bne.n	80062c0 <USB_WritePMA+0x3a>
  }
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	372c      	adds	r7, #44	; 0x2c
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr

08006310 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006310:	b480      	push	{r7}
 8006312:	b08b      	sub	sp, #44	; 0x2c
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	4611      	mov	r1, r2
 800631c:	461a      	mov	r2, r3
 800631e:	460b      	mov	r3, r1
 8006320:	80fb      	strh	r3, [r7, #6]
 8006322:	4613      	mov	r3, r2
 8006324:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006326:	88bb      	ldrh	r3, [r7, #4]
 8006328:	085b      	lsrs	r3, r3, #1
 800632a:	b29b      	uxth	r3, r3
 800632c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	005a      	lsls	r2, r3, #1
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006342:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
 8006348:	e01b      	b.n	8006382 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	3302      	adds	r3, #2
 8006356:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	b2da      	uxtb	r2, r3
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	3301      	adds	r3, #1
 8006364:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	0a1b      	lsrs	r3, r3, #8
 800636a:	b2da      	uxtb	r2, r3
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	3301      	adds	r3, #1
 8006374:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	3302      	adds	r3, #2
 800637a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	3b01      	subs	r3, #1
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e0      	bne.n	800634a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006388:	88bb      	ldrh	r3, [r7, #4]
 800638a:	f003 0301 	and.w	r3, r3, #1
 800638e:	b29b      	uxth	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d007      	beq.n	80063a4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	881b      	ldrh	r3, [r3, #0]
 8006398:	b29b      	uxth	r3, r3
 800639a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	701a      	strb	r2, [r3, #0]
  }
}
 80063a4:	bf00      	nop
 80063a6:	372c      	adds	r7, #44	; 0x2c
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bc80      	pop	{r7}
 80063ac:	4770      	bx	lr

080063ae <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80063ba:	2304      	movs	r3, #4
 80063bc:	2203      	movs	r2, #3
 80063be:	2181      	movs	r1, #129	; 0x81
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 fc84 	bl	8007cce <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80063cc:	2010      	movs	r0, #16
 80063ce:	f001 fd93 	bl	8007ef8 <USBD_static_malloc>
 80063d2:	4602      	mov	r2, r0
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80063e4:	2302      	movs	r3, #2
 80063e6:	e005      	b.n	80063f4 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ee:	2200      	movs	r2, #0
 80063f0:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	460b      	mov	r3, r1
 8006406:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006408:	2181      	movs	r1, #129	; 0x81
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fc85 	bl	8007d1a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d009      	beq.n	8006434 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fd72 	bl	8007f10 <USBD_static_free>
    pdev->pClassData = NULL;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006450:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800646a:	2b00      	cmp	r3, #0
 800646c:	d045      	beq.n	80064fa <USBD_HID_Setup+0xba>
 800646e:	2b20      	cmp	r3, #32
 8006470:	f040 80d3 	bne.w	800661a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	785b      	ldrb	r3, [r3, #1]
 8006478:	3b02      	subs	r3, #2
 800647a:	2b09      	cmp	r3, #9
 800647c:	d835      	bhi.n	80064ea <USBD_HID_Setup+0xaa>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <USBD_HID_Setup+0x44>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	080064db 	.word	0x080064db
 8006488:	080064bb 	.word	0x080064bb
 800648c:	080064eb 	.word	0x080064eb
 8006490:	080064eb 	.word	0x080064eb
 8006494:	080064eb 	.word	0x080064eb
 8006498:	080064eb 	.word	0x080064eb
 800649c:	080064eb 	.word	0x080064eb
 80064a0:	080064eb 	.word	0x080064eb
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064ad 	.word	0x080064ad
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	885b      	ldrh	r3, [r3, #2]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	601a      	str	r2, [r3, #0]
          break;
 80064b8:	e01e      	b.n	80064f8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2201      	movs	r2, #1
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f001 f944 	bl	800774e <USBD_CtlSendData>
          break;
 80064c6:	e017      	b.n	80064f8 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	885b      	ldrh	r3, [r3, #2]
 80064cc:	0a1b      	lsrs	r3, r3, #8
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	605a      	str	r2, [r3, #4]
          break;
 80064d8:	e00e      	b.n	80064f8 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	3304      	adds	r3, #4
 80064de:	2201      	movs	r2, #1
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 f933 	bl	800774e <USBD_CtlSendData>
          break;
 80064e8:	e006      	b.n	80064f8 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f001 f8c4 	bl	800767a <USBD_CtlError>
          ret = USBD_FAIL;
 80064f2:	2302      	movs	r3, #2
 80064f4:	75fb      	strb	r3, [r7, #23]
          break;
 80064f6:	bf00      	nop
      }
      break;
 80064f8:	e096      	b.n	8006628 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	2b0b      	cmp	r3, #11
 8006500:	f200 8083 	bhi.w	800660a <USBD_HID_Setup+0x1ca>
 8006504:	a201      	add	r2, pc, #4	; (adr r2, 800650c <USBD_HID_Setup+0xcc>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	0800653d 	.word	0x0800653d
 8006510:	0800660b 	.word	0x0800660b
 8006514:	0800660b 	.word	0x0800660b
 8006518:	0800660b 	.word	0x0800660b
 800651c:	0800660b 	.word	0x0800660b
 8006520:	0800660b 	.word	0x0800660b
 8006524:	08006565 	.word	0x08006565
 8006528:	0800660b 	.word	0x0800660b
 800652c:	0800660b 	.word	0x0800660b
 8006530:	0800660b 	.word	0x0800660b
 8006534:	080065bd 	.word	0x080065bd
 8006538:	080065e5 	.word	0x080065e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006542:	2b03      	cmp	r3, #3
 8006544:	d107      	bne.n	8006556 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006546:	f107 030e 	add.w	r3, r7, #14
 800654a:	2202      	movs	r2, #2
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 f8fd 	bl	800774e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006554:	e060      	b.n	8006618 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 f88e 	bl	800767a <USBD_CtlError>
            ret = USBD_FAIL;
 800655e:	2302      	movs	r3, #2
 8006560:	75fb      	strb	r3, [r7, #23]
          break;
 8006562:	e059      	b.n	8006618 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	885b      	ldrh	r3, [r3, #2]
 8006568:	0a1b      	lsrs	r3, r3, #8
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b22      	cmp	r3, #34	; 0x22
 800656e:	d108      	bne.n	8006582 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	88db      	ldrh	r3, [r3, #6]
 8006574:	2b4a      	cmp	r3, #74	; 0x4a
 8006576:	bf28      	it	cs
 8006578:	234a      	movcs	r3, #74	; 0x4a
 800657a:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 800657c:	4b2d      	ldr	r3, [pc, #180]	; (8006634 <USBD_HID_Setup+0x1f4>)
 800657e:	61bb      	str	r3, [r7, #24]
 8006580:	e015      	b.n	80065ae <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	885b      	ldrh	r3, [r3, #2]
 8006586:	0a1b      	lsrs	r3, r3, #8
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b21      	cmp	r3, #33	; 0x21
 800658c:	d108      	bne.n	80065a0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800658e:	4b2a      	ldr	r3, [pc, #168]	; (8006638 <USBD_HID_Setup+0x1f8>)
 8006590:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	88db      	ldrh	r3, [r3, #6]
 8006596:	2b09      	cmp	r3, #9
 8006598:	bf28      	it	cs
 800659a:	2309      	movcs	r3, #9
 800659c:	83fb      	strh	r3, [r7, #30]
 800659e:	e006      	b.n	80065ae <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80065a0:	6839      	ldr	r1, [r7, #0]
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 f869 	bl	800767a <USBD_CtlError>
            ret = USBD_FAIL;
 80065a8:	2302      	movs	r3, #2
 80065aa:	75fb      	strb	r3, [r7, #23]
            break;
 80065ac:	e034      	b.n	8006618 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80065ae:	8bfb      	ldrh	r3, [r7, #30]
 80065b0:	461a      	mov	r2, r3
 80065b2:	69b9      	ldr	r1, [r7, #24]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f001 f8ca 	bl	800774e <USBD_CtlSendData>
          break;
 80065ba:	e02d      	b.n	8006618 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d107      	bne.n	80065d6 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3308      	adds	r3, #8
 80065ca:	2201      	movs	r2, #1
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f001 f8bd 	bl	800774e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065d4:	e020      	b.n	8006618 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80065d6:	6839      	ldr	r1, [r7, #0]
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 f84e 	bl	800767a <USBD_CtlError>
            ret = USBD_FAIL;
 80065de:	2302      	movs	r3, #2
 80065e0:	75fb      	strb	r3, [r7, #23]
          break;
 80065e2:	e019      	b.n	8006618 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ea:	2b03      	cmp	r3, #3
 80065ec:	d106      	bne.n	80065fc <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	885b      	ldrh	r3, [r3, #2]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065fa:	e00d      	b.n	8006618 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 f83b 	bl	800767a <USBD_CtlError>
            ret = USBD_FAIL;
 8006604:	2302      	movs	r3, #2
 8006606:	75fb      	strb	r3, [r7, #23]
          break;
 8006608:	e006      	b.n	8006618 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 f834 	bl	800767a <USBD_CtlError>
          ret = USBD_FAIL;
 8006612:	2302      	movs	r3, #2
 8006614:	75fb      	strb	r3, [r7, #23]
          break;
 8006616:	bf00      	nop
      }
      break;
 8006618:	e006      	b.n	8006628 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f001 f82c 	bl	800767a <USBD_CtlError>
      ret = USBD_FAIL;
 8006622:	2302      	movs	r3, #2
 8006624:	75fb      	strb	r3, [r7, #23]
      break;
 8006626:	bf00      	nop
  }

  return ret;
 8006628:	7dfb      	ldrb	r3, [r7, #23]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3720      	adds	r7, #32
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	200000c8 	.word	0x200000c8
 8006638:	200000b0 	.word	0x200000b0

0800663c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	4613      	mov	r3, r2
 8006648:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006650:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006658:	2b03      	cmp	r3, #3
 800665a:	d10c      	bne.n	8006676 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	7b1b      	ldrb	r3, [r3, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d108      	bne.n	8006676 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2201      	movs	r2, #1
 8006668:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	2181      	movs	r1, #129	; 0x81
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f001 fbfa 	bl	8007e6a <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2222      	movs	r2, #34	; 0x22
 800668c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800668e:	4b03      	ldr	r3, [pc, #12]	; (800669c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr
 800669a:	bf00      	nop
 800669c:	20000044 	.word	0x20000044

080066a0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2222      	movs	r2, #34	; 0x22
 80066ac:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80066ae:	4b03      	ldr	r3, [pc, #12]	; (80066bc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	370c      	adds	r7, #12
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	20000068 	.word	0x20000068

080066c0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2222      	movs	r2, #34	; 0x22
 80066cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80066ce:	4b03      	ldr	r3, [pc, #12]	; (80066dc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bc80      	pop	{r7}
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	2000008c 	.word	0x2000008c

080066e0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f2:	2200      	movs	r2, #0
 80066f4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc80      	pop	{r7}
 8006700:	4770      	bx	lr
	...

08006704 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	220a      	movs	r2, #10
 8006710:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006712:	4b03      	ldr	r3, [pc, #12]	; (8006720 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006714:	4618      	mov	r0, r3
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	200000bc 	.word	0x200000bc

08006724 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006738:	2302      	movs	r3, #2
 800673a:	e01a      	b.n	8006772 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	79fa      	ldrb	r2, [r7, #7]
 8006768:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f001 fa4c 	bl	8007c08 <USBD_LL_Init>

  return USBD_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800677a:	b480      	push	{r7}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d006      	beq.n	800679c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
 800679a:	e001      	b.n	80067a0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800679c:	2302      	movs	r3, #2
 800679e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80067a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bc80      	pop	{r7}
 80067aa:	4770      	bx	lr

080067ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 fa6f 	bl	8007c98 <USBD_LL_Start>

  return USBD_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	460b      	mov	r3, r1
 80067e2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80067e4:	2302      	movs	r3, #2
 80067e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00c      	beq.n	800680c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	78fa      	ldrb	r2, [r7, #3]
 80067fc:	4611      	mov	r1, r2
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	460b      	mov	r3, r1
 8006820:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	4611      	mov	r1, r2
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3

  return USBD_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3708      	adds	r7, #8
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800684c:	6839      	ldr	r1, [r7, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fed7 	bl	8007602 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006862:	461a      	mov	r2, r3
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	2b02      	cmp	r3, #2
 8006876:	d016      	beq.n	80068a6 <USBD_LL_SetupStage+0x6a>
 8006878:	2b02      	cmp	r3, #2
 800687a:	d81c      	bhi.n	80068b6 <USBD_LL_SetupStage+0x7a>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <USBD_LL_SetupStage+0x4a>
 8006880:	2b01      	cmp	r3, #1
 8006882:	d008      	beq.n	8006896 <USBD_LL_SetupStage+0x5a>
 8006884:	e017      	b.n	80068b6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800688c:	4619      	mov	r1, r3
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f9ca 	bl	8006c28 <USBD_StdDevReq>
      break;
 8006894:	e01a      	b.n	80068cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800689c:	4619      	mov	r1, r3
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa2c 	bl	8006cfc <USBD_StdItfReq>
      break;
 80068a4:	e012      	b.n	80068cc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa6c 	bl	8006d8c <USBD_StdEPReq>
      break;
 80068b4:	e00a      	b.n	80068cc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80068bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 fa47 	bl	8007d58 <USBD_LL_StallEP>
      break;
 80068ca:	bf00      	nop
  }

  return USBD_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3708      	adds	r7, #8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b086      	sub	sp, #24
 80068da:	af00      	add	r7, sp, #0
 80068dc:	60f8      	str	r0, [r7, #12]
 80068de:	460b      	mov	r3, r1
 80068e0:	607a      	str	r2, [r7, #4]
 80068e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d14b      	bne.n	8006982 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068f0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d134      	bne.n	8006966 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	429a      	cmp	r2, r3
 8006906:	d919      	bls.n	800693c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	68da      	ldr	r2, [r3, #12]
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800691e:	429a      	cmp	r2, r3
 8006920:	d203      	bcs.n	800692a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006926:	b29b      	uxth	r3, r3
 8006928:	e002      	b.n	8006930 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800692e:	b29b      	uxth	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 ff38 	bl	80077aa <USBD_CtlContinueRx>
 800693a:	e038      	b.n	80069ae <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006942:	691b      	ldr	r3, [r3, #16]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800694e:	2b03      	cmp	r3, #3
 8006950:	d105      	bne.n	800695e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 ff35 	bl	80077ce <USBD_CtlSendStatus>
 8006964:	e023      	b.n	80069ae <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800696c:	2b05      	cmp	r3, #5
 800696e:	d11e      	bne.n	80069ae <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006978:	2100      	movs	r1, #0
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f001 f9ec 	bl	8007d58 <USBD_LL_StallEP>
 8006980:	e015      	b.n	80069ae <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006994:	2b03      	cmp	r3, #3
 8006996:	d108      	bne.n	80069aa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	7afa      	ldrb	r2, [r7, #11]
 80069a2:	4611      	mov	r1, r2
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	4798      	blx	r3
 80069a8:	e001      	b.n	80069ae <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80069aa:	2302      	movs	r3, #2
 80069ac:	e000      	b.n	80069b0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	460b      	mov	r3, r1
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80069c6:	7afb      	ldrb	r3, [r7, #11]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d17f      	bne.n	8006acc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	3314      	adds	r3, #20
 80069d0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d15c      	bne.n	8006a96 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	68da      	ldr	r2, [r3, #12]
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d915      	bls.n	8006a14 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	68da      	ldr	r2, [r3, #12]
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	1ad2      	subs	r2, r2, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	461a      	mov	r2, r3
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	68f8      	ldr	r0, [r7, #12]
 8006a02:	f000 fec0 	bl	8007786 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a06:	2300      	movs	r3, #0
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f001 fa4f 	bl	8007eb0 <USBD_LL_PrepareReceive>
 8006a12:	e04e      	b.n	8006ab2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	6912      	ldr	r2, [r2, #16]
 8006a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a20:	fb01 f202 	mul.w	r2, r1, r2
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d11c      	bne.n	8006a64 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d316      	bcc.n	8006a64 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d20f      	bcs.n	8006a64 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a44:	2200      	movs	r2, #0
 8006a46:	2100      	movs	r1, #0
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 fe9c 	bl	8007786 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a56:	2300      	movs	r3, #0
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f001 fa27 	bl	8007eb0 <USBD_LL_PrepareReceive>
 8006a62:	e026      	b.n	8006ab2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00a      	beq.n	8006a86 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006a76:	2b03      	cmp	r3, #3
 8006a78:	d105      	bne.n	8006a86 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006a86:	2180      	movs	r1, #128	; 0x80
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f001 f965 	bl	8007d58 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 feb0 	bl	80077f4 <USBD_CtlReceiveStatus>
 8006a94:	e00d      	b.n	8006ab2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d004      	beq.n	8006aaa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d103      	bne.n	8006ab2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f001 f953 	bl	8007d58 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d11d      	bne.n	8006af8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f7ff fe81 	bl	80067c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006aca:	e015      	b.n	8006af8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006ade:	2b03      	cmp	r3, #3
 8006ae0:	d108      	bne.n	8006af4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	7afa      	ldrb	r2, [r7, #11]
 8006aec:	4611      	mov	r1, r2
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	4798      	blx	r3
 8006af2:	e001      	b.n	8006af8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006af4:	2302      	movs	r3, #2
 8006af6:	e000      	b.n	8006afa <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f001 f8dc 	bl	8007cce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2240      	movs	r2, #64	; 0x40
 8006b22:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006b26:	2340      	movs	r3, #64	; 0x40
 8006b28:	2200      	movs	r2, #0
 8006b2a:	2180      	movs	r1, #128	; 0x80
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f001 f8ce 	bl	8007cce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2240      	movs	r2, #64	; 0x40
 8006b3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6852      	ldr	r2, [r2, #4]
 8006b72:	b2d2      	uxtb	r2, r2
 8006b74:	4611      	mov	r1, r2
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	4798      	blx	r3
  }

  return USBD_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	78fa      	ldrb	r2, [r7, #3]
 8006b94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr

08006ba2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ba2:	b480      	push	{r7}
 8006ba4:	b083      	sub	sp, #12
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2204      	movs	r2, #4
 8006bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d105      	bne.n	8006be8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d10b      	bne.n	8006c1e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c3e:	2b40      	cmp	r3, #64	; 0x40
 8006c40:	d005      	beq.n	8006c4e <USBD_StdDevReq+0x26>
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d84f      	bhi.n	8006ce6 <USBD_StdDevReq+0xbe>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d009      	beq.n	8006c5e <USBD_StdDevReq+0x36>
 8006c4a:	2b20      	cmp	r3, #32
 8006c4c:	d14b      	bne.n	8006ce6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	4798      	blx	r3
      break;
 8006c5c:	e048      	b.n	8006cf0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	785b      	ldrb	r3, [r3, #1]
 8006c62:	2b09      	cmp	r3, #9
 8006c64:	d839      	bhi.n	8006cda <USBD_StdDevReq+0xb2>
 8006c66:	a201      	add	r2, pc, #4	; (adr r2, 8006c6c <USBD_StdDevReq+0x44>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006cbd 	.word	0x08006cbd
 8006c70:	08006cd1 	.word	0x08006cd1
 8006c74:	08006cdb 	.word	0x08006cdb
 8006c78:	08006cc7 	.word	0x08006cc7
 8006c7c:	08006cdb 	.word	0x08006cdb
 8006c80:	08006c9f 	.word	0x08006c9f
 8006c84:	08006c95 	.word	0x08006c95
 8006c88:	08006cdb 	.word	0x08006cdb
 8006c8c:	08006cb3 	.word	0x08006cb3
 8006c90:	08006ca9 	.word	0x08006ca9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 f9dc 	bl	8007054 <USBD_GetDescriptor>
          break;
 8006c9c:	e022      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fb3f 	bl	8007324 <USBD_SetAddress>
          break;
 8006ca6:	e01d      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fb7e 	bl	80073ac <USBD_SetConfig>
          break;
 8006cb0:	e018      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fc07 	bl	80074c8 <USBD_GetConfig>
          break;
 8006cba:	e013      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006cbc:	6839      	ldr	r1, [r7, #0]
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fc37 	bl	8007532 <USBD_GetStatus>
          break;
 8006cc4:	e00e      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fc65 	bl	8007598 <USBD_SetFeature>
          break;
 8006cce:	e009      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fc74 	bl	80075c0 <USBD_ClrFeature>
          break;
 8006cd8:	e004      	b.n	8006ce4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006cda:	6839      	ldr	r1, [r7, #0]
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fccc 	bl	800767a <USBD_CtlError>
          break;
 8006ce2:	bf00      	nop
      }
      break;
 8006ce4:	e004      	b.n	8006cf0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fcc6 	bl	800767a <USBD_CtlError>
      break;
 8006cee:	bf00      	nop
  }

  return ret;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop

08006cfc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d005      	beq.n	8006d22 <USBD_StdItfReq+0x26>
 8006d16:	2b40      	cmp	r3, #64	; 0x40
 8006d18:	d82e      	bhi.n	8006d78 <USBD_StdItfReq+0x7c>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <USBD_StdItfReq+0x26>
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d12a      	bne.n	8006d78 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d28:	3b01      	subs	r3, #1
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d81d      	bhi.n	8006d6a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	889b      	ldrh	r3, [r3, #4]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d813      	bhi.n	8006d60 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
 8006d46:	4603      	mov	r3, r0
 8006d48:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	88db      	ldrh	r3, [r3, #6]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d110      	bne.n	8006d74 <USBD_StdItfReq+0x78>
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10d      	bne.n	8006d74 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fd38 	bl	80077ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d5e:	e009      	b.n	8006d74 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fc89 	bl	800767a <USBD_CtlError>
          break;
 8006d68:	e004      	b.n	8006d74 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fc84 	bl	800767a <USBD_CtlError>
          break;
 8006d72:	e000      	b.n	8006d76 <USBD_StdItfReq+0x7a>
          break;
 8006d74:	bf00      	nop
      }
      break;
 8006d76:	e004      	b.n	8006d82 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fc7d 	bl	800767a <USBD_CtlError>
      break;
 8006d80:	bf00      	nop
  }

  return USBD_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d96:	2300      	movs	r3, #0
 8006d98:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	889b      	ldrh	r3, [r3, #4]
 8006d9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006da8:	2b40      	cmp	r3, #64	; 0x40
 8006daa:	d007      	beq.n	8006dbc <USBD_StdEPReq+0x30>
 8006dac:	2b40      	cmp	r3, #64	; 0x40
 8006dae:	f200 8146 	bhi.w	800703e <USBD_StdEPReq+0x2b2>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00a      	beq.n	8006dcc <USBD_StdEPReq+0x40>
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	f040 8141 	bne.w	800703e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	6839      	ldr	r1, [r7, #0]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	4798      	blx	r3
      break;
 8006dca:	e13d      	b.n	8007048 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d10a      	bne.n	8006dee <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	e12d      	b.n	800704a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	785b      	ldrb	r3, [r3, #1]
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d007      	beq.n	8006e06 <USBD_StdEPReq+0x7a>
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	f300 811b 	bgt.w	8007032 <USBD_StdEPReq+0x2a6>
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d072      	beq.n	8006ee6 <USBD_StdEPReq+0x15a>
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d03a      	beq.n	8006e7a <USBD_StdEPReq+0xee>
 8006e04:	e115      	b.n	8007032 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d002      	beq.n	8006e16 <USBD_StdEPReq+0x8a>
 8006e10:	2b03      	cmp	r3, #3
 8006e12:	d015      	beq.n	8006e40 <USBD_StdEPReq+0xb4>
 8006e14:	e02b      	b.n	8006e6e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00c      	beq.n	8006e36 <USBD_StdEPReq+0xaa>
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b80      	cmp	r3, #128	; 0x80
 8006e20:	d009      	beq.n	8006e36 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 ff96 	bl	8007d58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006e2c:	2180      	movs	r1, #128	; 0x80
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 ff92 	bl	8007d58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e34:	e020      	b.n	8006e78 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fc1e 	bl	800767a <USBD_CtlError>
              break;
 8006e3e:	e01b      	b.n	8006e78 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	885b      	ldrh	r3, [r3, #2]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10e      	bne.n	8006e66 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00b      	beq.n	8006e66 <USBD_StdEPReq+0xda>
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b80      	cmp	r3, #128	; 0x80
 8006e52:	d008      	beq.n	8006e66 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	88db      	ldrh	r3, [r3, #6]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d104      	bne.n	8006e66 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 ff79 	bl	8007d58 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fcb1 	bl	80077ce <USBD_CtlSendStatus>

              break;
 8006e6c:	e004      	b.n	8006e78 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fc02 	bl	800767a <USBD_CtlError>
              break;
 8006e76:	bf00      	nop
          }
          break;
 8006e78:	e0e0      	b.n	800703c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d002      	beq.n	8006e8a <USBD_StdEPReq+0xfe>
 8006e84:	2b03      	cmp	r3, #3
 8006e86:	d015      	beq.n	8006eb4 <USBD_StdEPReq+0x128>
 8006e88:	e026      	b.n	8006ed8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e8a:	7bbb      	ldrb	r3, [r7, #14]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00c      	beq.n	8006eaa <USBD_StdEPReq+0x11e>
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	2b80      	cmp	r3, #128	; 0x80
 8006e94:	d009      	beq.n	8006eaa <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 ff5c 	bl	8007d58 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ea0:	2180      	movs	r1, #128	; 0x80
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 ff58 	bl	8007d58 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ea8:	e01c      	b.n	8006ee4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fbe4 	bl	800767a <USBD_CtlError>
              break;
 8006eb2:	e017      	b.n	8006ee4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	885b      	ldrh	r3, [r3, #2]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d112      	bne.n	8006ee2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 ff63 	bl	8007d96 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fc7c 	bl	80077ce <USBD_CtlSendStatus>
              }
              break;
 8006ed6:	e004      	b.n	8006ee2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fbcd 	bl	800767a <USBD_CtlError>
              break;
 8006ee0:	e000      	b.n	8006ee4 <USBD_StdEPReq+0x158>
              break;
 8006ee2:	bf00      	nop
          }
          break;
 8006ee4:	e0aa      	b.n	800703c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d002      	beq.n	8006ef6 <USBD_StdEPReq+0x16a>
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d032      	beq.n	8006f5a <USBD_StdEPReq+0x1ce>
 8006ef4:	e097      	b.n	8007026 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <USBD_StdEPReq+0x180>
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	2b80      	cmp	r3, #128	; 0x80
 8006f00:	d004      	beq.n	8006f0c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fbb8 	bl	800767a <USBD_CtlError>
                break;
 8006f0a:	e091      	b.n	8007030 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	da0b      	bge.n	8006f2c <USBD_StdEPReq+0x1a0>
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	3310      	adds	r3, #16
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	4413      	add	r3, r2
 8006f28:	3304      	adds	r3, #4
 8006f2a:	e00b      	b.n	8006f44 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f2c:	7bbb      	ldrb	r3, [r7, #14]
 8006f2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	4413      	add	r3, r2
 8006f42:	3304      	adds	r3, #4
 8006f44:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fbfb 	bl	800774e <USBD_CtlSendData>
              break;
 8006f58:	e06a      	b.n	8007030 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	da11      	bge.n	8006f86 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	f003 020f 	and.w	r2, r3, #15
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	3318      	adds	r3, #24
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d117      	bne.n	8006fac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fb7b 	bl	800767a <USBD_CtlError>
                  break;
 8006f84:	e054      	b.n	8007030 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f86:	7bbb      	ldrb	r3, [r7, #14]
 8006f88:	f003 020f 	and.w	r2, r3, #15
 8006f8c:	6879      	ldr	r1, [r7, #4]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	440b      	add	r3, r1
 8006f98:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006fa2:	6839      	ldr	r1, [r7, #0]
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fb68 	bl	800767a <USBD_CtlError>
                  break;
 8006faa:	e041      	b.n	8007030 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	da0b      	bge.n	8006fcc <USBD_StdEPReq+0x240>
 8006fb4:	7bbb      	ldrb	r3, [r7, #14]
 8006fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fba:	4613      	mov	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	3310      	adds	r3, #16
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	3304      	adds	r3, #4
 8006fca:	e00b      	b.n	8006fe4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <USBD_StdEPReq+0x266>
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	2b80      	cmp	r3, #128	; 0x80
 8006ff0:	d103      	bne.n	8006ffa <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	e00e      	b.n	8007018 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fee8 	bl	8007dd4 <USBD_LL_IsStallEP>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	2201      	movs	r2, #1
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	e002      	b.n	8007018 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2202      	movs	r2, #2
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb95 	bl	800774e <USBD_CtlSendData>
              break;
 8007024:	e004      	b.n	8007030 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fb26 	bl	800767a <USBD_CtlError>
              break;
 800702e:	bf00      	nop
          }
          break;
 8007030:	e004      	b.n	800703c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fb20 	bl	800767a <USBD_CtlError>
          break;
 800703a:	bf00      	nop
      }
      break;
 800703c:	e004      	b.n	8007048 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fb1a 	bl	800767a <USBD_CtlError>
      break;
 8007046:	bf00      	nop
  }

  return ret;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
	...

08007054 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007062:	2300      	movs	r3, #0
 8007064:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	885b      	ldrh	r3, [r3, #2]
 800706e:	0a1b      	lsrs	r3, r3, #8
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	2b06      	cmp	r3, #6
 8007076:	f200 8128 	bhi.w	80072ca <USBD_GetDescriptor+0x276>
 800707a:	a201      	add	r2, pc, #4	; (adr r2, 8007080 <USBD_GetDescriptor+0x2c>)
 800707c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007080:	0800709d 	.word	0x0800709d
 8007084:	080070b5 	.word	0x080070b5
 8007088:	080070f5 	.word	0x080070f5
 800708c:	080072cb 	.word	0x080072cb
 8007090:	080072cb 	.word	0x080072cb
 8007094:	0800726b 	.word	0x0800726b
 8007098:	08007297 	.word	0x08007297
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	7c12      	ldrb	r2, [r2, #16]
 80070a8:	f107 0108 	add.w	r1, r7, #8
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	60f8      	str	r0, [r7, #12]
      break;
 80070b2:	e112      	b.n	80072da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	7c1b      	ldrb	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10d      	bne.n	80070d8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c4:	f107 0208 	add.w	r2, r7, #8
 80070c8:	4610      	mov	r0, r2
 80070ca:	4798      	blx	r3
 80070cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	3301      	adds	r3, #1
 80070d2:	2202      	movs	r2, #2
 80070d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070d6:	e100      	b.n	80072da <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e0:	f107 0208 	add.w	r2, r7, #8
 80070e4:	4610      	mov	r0, r2
 80070e6:	4798      	blx	r3
 80070e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3301      	adds	r3, #1
 80070ee:	2202      	movs	r2, #2
 80070f0:	701a      	strb	r2, [r3, #0]
      break;
 80070f2:	e0f2      	b.n	80072da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	885b      	ldrh	r3, [r3, #2]
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	f200 80ac 	bhi.w	8007258 <USBD_GetDescriptor+0x204>
 8007100:	a201      	add	r2, pc, #4	; (adr r2, 8007108 <USBD_GetDescriptor+0xb4>)
 8007102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007106:	bf00      	nop
 8007108:	08007121 	.word	0x08007121
 800710c:	08007155 	.word	0x08007155
 8007110:	08007189 	.word	0x08007189
 8007114:	080071bd 	.word	0x080071bd
 8007118:	080071f1 	.word	0x080071f1
 800711c:	08007225 	.word	0x08007225
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	7c12      	ldrb	r2, [r2, #16]
 8007138:	f107 0108 	add.w	r1, r7, #8
 800713c:	4610      	mov	r0, r2
 800713e:	4798      	blx	r3
 8007140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007142:	e091      	b.n	8007268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa97 	bl	800767a <USBD_CtlError>
            err++;
 800714c:	7afb      	ldrb	r3, [r7, #11]
 800714e:	3301      	adds	r3, #1
 8007150:	72fb      	strb	r3, [r7, #11]
          break;
 8007152:	e089      	b.n	8007268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7c12      	ldrb	r2, [r2, #16]
 800716c:	f107 0108 	add.w	r1, r7, #8
 8007170:	4610      	mov	r0, r2
 8007172:	4798      	blx	r3
 8007174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007176:	e077      	b.n	8007268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa7d 	bl	800767a <USBD_CtlError>
            err++;
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	3301      	adds	r3, #1
 8007184:	72fb      	strb	r3, [r7, #11]
          break;
 8007186:	e06f      	b.n	8007268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	7c12      	ldrb	r2, [r2, #16]
 80071a0:	f107 0108 	add.w	r1, r7, #8
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071aa:	e05d      	b.n	8007268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa63 	bl	800767a <USBD_CtlError>
            err++;
 80071b4:	7afb      	ldrb	r3, [r7, #11]
 80071b6:	3301      	adds	r3, #1
 80071b8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ba:	e055      	b.n	8007268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00b      	beq.n	80071e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	7c12      	ldrb	r2, [r2, #16]
 80071d4:	f107 0108 	add.w	r1, r7, #8
 80071d8:	4610      	mov	r0, r2
 80071da:	4798      	blx	r3
 80071dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071de:	e043      	b.n	8007268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fa49 	bl	800767a <USBD_CtlError>
            err++;
 80071e8:	7afb      	ldrb	r3, [r7, #11]
 80071ea:	3301      	adds	r3, #1
 80071ec:	72fb      	strb	r3, [r7, #11]
          break;
 80071ee:	e03b      	b.n	8007268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007202:	695b      	ldr	r3, [r3, #20]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	7c12      	ldrb	r2, [r2, #16]
 8007208:	f107 0108 	add.w	r1, r7, #8
 800720c:	4610      	mov	r0, r2
 800720e:	4798      	blx	r3
 8007210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007212:	e029      	b.n	8007268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fa2f 	bl	800767a <USBD_CtlError>
            err++;
 800721c:	7afb      	ldrb	r3, [r7, #11]
 800721e:	3301      	adds	r3, #1
 8007220:	72fb      	strb	r3, [r7, #11]
          break;
 8007222:	e021      	b.n	8007268 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00b      	beq.n	8007248 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	7c12      	ldrb	r2, [r2, #16]
 800723c:	f107 0108 	add.w	r1, r7, #8
 8007240:	4610      	mov	r0, r2
 8007242:	4798      	blx	r3
 8007244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007246:	e00f      	b.n	8007268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007248:	6839      	ldr	r1, [r7, #0]
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 fa15 	bl	800767a <USBD_CtlError>
            err++;
 8007250:	7afb      	ldrb	r3, [r7, #11]
 8007252:	3301      	adds	r3, #1
 8007254:	72fb      	strb	r3, [r7, #11]
          break;
 8007256:	e007      	b.n	8007268 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fa0d 	bl	800767a <USBD_CtlError>
          err++;
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	3301      	adds	r3, #1
 8007264:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007266:	e038      	b.n	80072da <USBD_GetDescriptor+0x286>
 8007268:	e037      	b.n	80072da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	7c1b      	ldrb	r3, [r3, #16]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727a:	f107 0208 	add.w	r2, r7, #8
 800727e:	4610      	mov	r0, r2
 8007280:	4798      	blx	r3
 8007282:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007284:	e029      	b.n	80072da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007286:	6839      	ldr	r1, [r7, #0]
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f9f6 	bl	800767a <USBD_CtlError>
        err++;
 800728e:	7afb      	ldrb	r3, [r7, #11]
 8007290:	3301      	adds	r3, #1
 8007292:	72fb      	strb	r3, [r7, #11]
      break;
 8007294:	e021      	b.n	80072da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	7c1b      	ldrb	r3, [r3, #16]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10d      	bne.n	80072ba <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f107 0208 	add.w	r2, r7, #8
 80072aa:	4610      	mov	r0, r2
 80072ac:	4798      	blx	r3
 80072ae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	2207      	movs	r2, #7
 80072b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072b8:	e00f      	b.n	80072da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f9dc 	bl	800767a <USBD_CtlError>
        err++;
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	3301      	adds	r3, #1
 80072c6:	72fb      	strb	r3, [r7, #11]
      break;
 80072c8:	e007      	b.n	80072da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f9d4 	bl	800767a <USBD_CtlError>
      err++;
 80072d2:	7afb      	ldrb	r3, [r7, #11]
 80072d4:	3301      	adds	r3, #1
 80072d6:	72fb      	strb	r3, [r7, #11]
      break;
 80072d8:	bf00      	nop
  }

  if (err != 0U)
 80072da:	7afb      	ldrb	r3, [r7, #11]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11c      	bne.n	800731a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80072e0:	893b      	ldrh	r3, [r7, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d011      	beq.n	800730a <USBD_GetDescriptor+0x2b6>
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	88db      	ldrh	r3, [r3, #6]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00d      	beq.n	800730a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	88da      	ldrh	r2, [r3, #6]
 80072f2:	893b      	ldrh	r3, [r7, #8]
 80072f4:	4293      	cmp	r3, r2
 80072f6:	bf28      	it	cs
 80072f8:	4613      	movcs	r3, r2
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072fe:	893b      	ldrh	r3, [r7, #8]
 8007300:	461a      	mov	r2, r3
 8007302:	68f9      	ldr	r1, [r7, #12]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa22 	bl	800774e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	88db      	ldrh	r3, [r3, #6]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d104      	bne.n	800731c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa5b 	bl	80077ce <USBD_CtlSendStatus>
 8007318:	e000      	b.n	800731c <USBD_GetDescriptor+0x2c8>
    return;
 800731a:	bf00      	nop
    }
  }
}
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop

08007324 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	889b      	ldrh	r3, [r3, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d130      	bne.n	8007398 <USBD_SetAddress+0x74>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	88db      	ldrh	r3, [r3, #6]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d12c      	bne.n	8007398 <USBD_SetAddress+0x74>
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	885b      	ldrh	r3, [r3, #2]
 8007342:	2b7f      	cmp	r3, #127	; 0x7f
 8007344:	d828      	bhi.n	8007398 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	885b      	ldrh	r3, [r3, #2]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007350:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007358:	2b03      	cmp	r3, #3
 800735a:	d104      	bne.n	8007366 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f98b 	bl	800767a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007364:	e01d      	b.n	80073a2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	7bfa      	ldrb	r2, [r7, #15]
 800736a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800736e:	7bfb      	ldrb	r3, [r7, #15]
 8007370:	4619      	mov	r1, r3
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 fd5a 	bl	8007e2c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fa28 	bl	80077ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d004      	beq.n	800738e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800738c:	e009      	b.n	80073a2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2201      	movs	r2, #1
 8007392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007396:	e004      	b.n	80073a2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f96d 	bl	800767a <USBD_CtlError>
  }
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	885b      	ldrh	r3, [r3, #2]
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	4b41      	ldr	r3, [pc, #260]	; (80074c4 <USBD_SetConfig+0x118>)
 80073be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073c0:	4b40      	ldr	r3, [pc, #256]	; (80074c4 <USBD_SetConfig+0x118>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d904      	bls.n	80073d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f955 	bl	800767a <USBD_CtlError>
 80073d0:	e075      	b.n	80074be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d002      	beq.n	80073e2 <USBD_SetConfig+0x36>
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d023      	beq.n	8007428 <USBD_SetConfig+0x7c>
 80073e0:	e062      	b.n	80074a8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80073e2:	4b38      	ldr	r3, [pc, #224]	; (80074c4 <USBD_SetConfig+0x118>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01a      	beq.n	8007420 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80073ea:	4b36      	ldr	r3, [pc, #216]	; (80074c4 <USBD_SetConfig+0x118>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2203      	movs	r2, #3
 80073f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073fc:	4b31      	ldr	r3, [pc, #196]	; (80074c4 <USBD_SetConfig+0x118>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff f9e8 	bl	80067d8 <USBD_SetClassConfig>
 8007408:	4603      	mov	r3, r0
 800740a:	2b02      	cmp	r3, #2
 800740c:	d104      	bne.n	8007418 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f932 	bl	800767a <USBD_CtlError>
            return;
 8007416:	e052      	b.n	80074be <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f9d8 	bl	80077ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800741e:	e04e      	b.n	80074be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f9d4 	bl	80077ce <USBD_CtlSendStatus>
        break;
 8007426:	e04a      	b.n	80074be <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007428:	4b26      	ldr	r3, [pc, #152]	; (80074c4 <USBD_SetConfig+0x118>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d112      	bne.n	8007456 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007438:	4b22      	ldr	r3, [pc, #136]	; (80074c4 <USBD_SetConfig+0x118>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007442:	4b20      	ldr	r3, [pc, #128]	; (80074c4 <USBD_SetConfig+0x118>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	4619      	mov	r1, r3
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff f9e4 	bl	8006816 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f9bd 	bl	80077ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007454:	e033      	b.n	80074be <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007456:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <USBD_SetConfig+0x118>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	429a      	cmp	r2, r3
 8007462:	d01d      	beq.n	80074a0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	b2db      	uxtb	r3, r3
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff f9d2 	bl	8006816 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007472:	4b14      	ldr	r3, [pc, #80]	; (80074c4 <USBD_SetConfig+0x118>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800747c:	4b11      	ldr	r3, [pc, #68]	; (80074c4 <USBD_SetConfig+0x118>)
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	4619      	mov	r1, r3
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff f9a8 	bl	80067d8 <USBD_SetClassConfig>
 8007488:	4603      	mov	r3, r0
 800748a:	2b02      	cmp	r3, #2
 800748c:	d104      	bne.n	8007498 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f8f2 	bl	800767a <USBD_CtlError>
            return;
 8007496:	e012      	b.n	80074be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f998 	bl	80077ce <USBD_CtlSendStatus>
        break;
 800749e:	e00e      	b.n	80074be <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f994 	bl	80077ce <USBD_CtlSendStatus>
        break;
 80074a6:	e00a      	b.n	80074be <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f8e5 	bl	800767a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80074b0:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <USBD_SetConfig+0x118>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff f9ad 	bl	8006816 <USBD_ClrClassConfig>
        break;
 80074bc:	bf00      	nop
    }
  }
}
 80074be:	3708      	adds	r7, #8
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	20000208 	.word	0x20000208

080074c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	88db      	ldrh	r3, [r3, #6]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d004      	beq.n	80074e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074da:	6839      	ldr	r1, [r7, #0]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f000 f8cc 	bl	800767a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074e2:	e022      	b.n	800752a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	dc02      	bgt.n	80074f4 <USBD_GetConfig+0x2c>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	dc03      	bgt.n	80074fa <USBD_GetConfig+0x32>
 80074f2:	e015      	b.n	8007520 <USBD_GetConfig+0x58>
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d00b      	beq.n	8007510 <USBD_GetConfig+0x48>
 80074f8:	e012      	b.n	8007520 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3308      	adds	r3, #8
 8007504:	2201      	movs	r2, #1
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f920 	bl	800774e <USBD_CtlSendData>
        break;
 800750e:	e00c      	b.n	800752a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3304      	adds	r3, #4
 8007514:	2201      	movs	r2, #1
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f918 	bl	800774e <USBD_CtlSendData>
        break;
 800751e:	e004      	b.n	800752a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007520:	6839      	ldr	r1, [r7, #0]
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f8a9 	bl	800767a <USBD_CtlError>
        break;
 8007528:	bf00      	nop
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b082      	sub	sp, #8
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007542:	3b01      	subs	r3, #1
 8007544:	2b02      	cmp	r3, #2
 8007546:	d81e      	bhi.n	8007586 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	88db      	ldrh	r3, [r3, #6]
 800754c:	2b02      	cmp	r3, #2
 800754e:	d004      	beq.n	800755a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f891 	bl	800767a <USBD_CtlError>
        break;
 8007558:	e01a      	b.n	8007590 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007566:	2b00      	cmp	r3, #0
 8007568:	d005      	beq.n	8007576 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f043 0202 	orr.w	r2, r3, #2
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	330c      	adds	r3, #12
 800757a:	2202      	movs	r2, #2
 800757c:	4619      	mov	r1, r3
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f8e5 	bl	800774e <USBD_CtlSendData>
      break;
 8007584:	e004      	b.n	8007590 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007586:	6839      	ldr	r1, [r7, #0]
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f876 	bl	800767a <USBD_CtlError>
      break;
 800758e:	bf00      	nop
  }
}
 8007590:	bf00      	nop
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	885b      	ldrh	r3, [r3, #2]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d106      	bne.n	80075b8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2201      	movs	r2, #1
 80075ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f90b 	bl	80077ce <USBD_CtlSendStatus>
  }
}
 80075b8:	bf00      	nop
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d0:	3b01      	subs	r3, #1
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d80b      	bhi.n	80075ee <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	885b      	ldrh	r3, [r3, #2]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d10c      	bne.n	80075f8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8f1 	bl	80077ce <USBD_CtlSendStatus>
      }
      break;
 80075ec:	e004      	b.n	80075f8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f842 	bl	800767a <USBD_CtlError>
      break;
 80075f6:	e000      	b.n	80075fa <USBD_ClrFeature+0x3a>
      break;
 80075f8:	bf00      	nop
  }
}
 80075fa:	bf00      	nop
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	785a      	ldrb	r2, [r3, #1]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	3302      	adds	r3, #2
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b29a      	uxth	r2, r3
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	3303      	adds	r3, #3
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	021b      	lsls	r3, r3, #8
 800762e:	b29b      	uxth	r3, r3
 8007630:	4413      	add	r3, r2
 8007632:	b29a      	uxth	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	3304      	adds	r3, #4
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	b29a      	uxth	r2, r3
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	3305      	adds	r3, #5
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b29b      	uxth	r3, r3
 8007648:	021b      	lsls	r3, r3, #8
 800764a:	b29b      	uxth	r3, r3
 800764c:	4413      	add	r3, r2
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	3306      	adds	r3, #6
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b29a      	uxth	r2, r3
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	3307      	adds	r3, #7
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	b29b      	uxth	r3, r3
 8007668:	4413      	add	r3, r2
 800766a:	b29a      	uxth	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	80da      	strh	r2, [r3, #6]

}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	bc80      	pop	{r7}
 8007678:	4770      	bx	lr

0800767a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007684:	2180      	movs	r1, #128	; 0x80
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fb66 	bl	8007d58 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800768c:	2100      	movs	r1, #0
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fb62 	bl	8007d58 <USBD_LL_StallEP>
}
 8007694:	bf00      	nop
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d032      	beq.n	8007718 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f834 	bl	8007720 <USBD_GetLen>
 80076b8:	4603      	mov	r3, r0
 80076ba:	3301      	adds	r3, #1
 80076bc:	b29b      	uxth	r3, r3
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	1c5a      	adds	r2, r3, #1
 80076ca:	75fa      	strb	r2, [r7, #23]
 80076cc:	461a      	mov	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4413      	add	r3, r2
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	7812      	ldrb	r2, [r2, #0]
 80076d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	1c5a      	adds	r2, r3, #1
 80076dc:	75fa      	strb	r2, [r7, #23]
 80076de:	461a      	mov	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4413      	add	r3, r2
 80076e4:	2203      	movs	r2, #3
 80076e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80076e8:	e012      	b.n	8007710 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	60fa      	str	r2, [r7, #12]
 80076f0:	7dfa      	ldrb	r2, [r7, #23]
 80076f2:	1c51      	adds	r1, r2, #1
 80076f4:	75f9      	strb	r1, [r7, #23]
 80076f6:	4611      	mov	r1, r2
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	440a      	add	r2, r1
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	75fa      	strb	r2, [r7, #23]
 8007706:	461a      	mov	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4413      	add	r3, r2
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e8      	bne.n	80076ea <USBD_GetString+0x4e>
    }
  }
}
 8007718:	bf00      	nop
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800772c:	e005      	b.n	800773a <USBD_GetLen+0x1a>
  {
    len++;
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	3301      	adds	r3, #1
 8007732:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3301      	adds	r3, #1
 8007738:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f5      	bne.n	800772e <USBD_GetLen+0xe>
  }

  return len;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3714      	adds	r7, #20
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr

0800774e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b084      	sub	sp, #16
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	4613      	mov	r3, r2
 800775a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2202      	movs	r2, #2
 8007760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007764:	88fa      	ldrh	r2, [r7, #6]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800776a:	88fa      	ldrh	r2, [r7, #6]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007770:	88fb      	ldrh	r3, [r7, #6]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	2100      	movs	r1, #0
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 fb77 	bl	8007e6a <USBD_LL_Transmit>

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	4613      	mov	r3, r2
 8007792:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007794:	88fb      	ldrh	r3, [r7, #6]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	2100      	movs	r1, #0
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fb65 	bl	8007e6a <USBD_LL_Transmit>

  return USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	4613      	mov	r3, r2
 80077b6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077b8:	88fb      	ldrh	r3, [r7, #6]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	2100      	movs	r1, #0
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 fb76 	bl	8007eb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2204      	movs	r2, #4
 80077da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077de:	2300      	movs	r3, #0
 80077e0:	2200      	movs	r2, #0
 80077e2:	2100      	movs	r1, #0
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fb40 	bl	8007e6a <USBD_LL_Transmit>

  return USBD_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2205      	movs	r2, #5
 8007800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007804:	2300      	movs	r3, #0
 8007806:	2200      	movs	r2, #0
 8007808:	2100      	movs	r1, #0
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fb50 	bl	8007eb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
	...

0800781c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007820:	2200      	movs	r2, #0
 8007822:	490e      	ldr	r1, [pc, #56]	; (800785c <MX_USB_DEVICE_Init+0x40>)
 8007824:	480e      	ldr	r0, [pc, #56]	; (8007860 <MX_USB_DEVICE_Init+0x44>)
 8007826:	f7fe ff7d 	bl	8006724 <USBD_Init>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007830:	f7f8 fe52 	bl	80004d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007834:	490b      	ldr	r1, [pc, #44]	; (8007864 <MX_USB_DEVICE_Init+0x48>)
 8007836:	480a      	ldr	r0, [pc, #40]	; (8007860 <MX_USB_DEVICE_Init+0x44>)
 8007838:	f7fe ff9f 	bl	800677a <USBD_RegisterClass>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d001      	beq.n	8007846 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007842:	f7f8 fe49 	bl	80004d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007846:	4806      	ldr	r0, [pc, #24]	; (8007860 <MX_USB_DEVICE_Init+0x44>)
 8007848:	f7fe ffb0 	bl	80067ac <USBD_Start>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007852:	f7f8 fe41 	bl	80004d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007856:	bf00      	nop
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000114 	.word	0x20000114
 8007860:	2000020c 	.word	0x2000020c
 8007864:	2000000c 	.word	0x2000000c

08007868 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	6039      	str	r1, [r7, #0]
 8007872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2212      	movs	r2, #18
 8007878:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <USBD_FS_DeviceDescriptor+0x20>)
}
 800787c:	4618      	mov	r0, r3
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	bc80      	pop	{r7}
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20000130 	.word	0x20000130

0800788c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	4603      	mov	r3, r0
 8007894:	6039      	str	r1, [r7, #0]
 8007896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2204      	movs	r2, #4
 800789c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800789e:	4b03      	ldr	r3, [pc, #12]	; (80078ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bc80      	pop	{r7}
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	20000144 	.word	0x20000144

080078b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	6039      	str	r1, [r7, #0]
 80078ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078bc:	79fb      	ldrb	r3, [r7, #7]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d105      	bne.n	80078ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	4907      	ldr	r1, [pc, #28]	; (80078e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078c6:	4808      	ldr	r0, [pc, #32]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078c8:	f7ff fee8 	bl	800769c <USBD_GetString>
 80078cc:	e004      	b.n	80078d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4904      	ldr	r1, [pc, #16]	; (80078e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80078d2:	4805      	ldr	r0, [pc, #20]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80078d4:	f7ff fee2 	bl	800769c <USBD_GetString>
  }
  return USBD_StrDesc;
 80078d8:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	200004d0 	.word	0x200004d0
 80078e8:	08008000 	.word	0x08008000

080078ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	4603      	mov	r3, r0
 80078f4:	6039      	str	r1, [r7, #0]
 80078f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	4904      	ldr	r1, [pc, #16]	; (800790c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80078fc:	4804      	ldr	r0, [pc, #16]	; (8007910 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80078fe:	f7ff fecd 	bl	800769c <USBD_GetString>
  return USBD_StrDesc;
 8007902:	4b02      	ldr	r3, [pc, #8]	; (800790c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007904:	4618      	mov	r0, r3
 8007906:	3708      	adds	r7, #8
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}
 800790c:	200004d0 	.word	0x200004d0
 8007910:	08008018 	.word	0x08008018

08007914 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	6039      	str	r1, [r7, #0]
 800791e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	221a      	movs	r2, #26
 8007924:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007926:	f000 f843 	bl	80079b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800792a:	4b02      	ldr	r3, [pc, #8]	; (8007934 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000148 	.word	0x20000148

08007938 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	6039      	str	r1, [r7, #0]
 8007942:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007944:	79fb      	ldrb	r3, [r7, #7]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d105      	bne.n	8007956 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	4907      	ldr	r1, [pc, #28]	; (800796c <USBD_FS_ConfigStrDescriptor+0x34>)
 800794e:	4808      	ldr	r0, [pc, #32]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007950:	f7ff fea4 	bl	800769c <USBD_GetString>
 8007954:	e004      	b.n	8007960 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	4904      	ldr	r1, [pc, #16]	; (800796c <USBD_FS_ConfigStrDescriptor+0x34>)
 800795a:	4805      	ldr	r0, [pc, #20]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x38>)
 800795c:	f7ff fe9e 	bl	800769c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007960:	4b02      	ldr	r3, [pc, #8]	; (800796c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	200004d0 	.word	0x200004d0
 8007970:	0800802c 	.word	0x0800802c

08007974 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	6039      	str	r1, [r7, #0]
 800797e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007980:	79fb      	ldrb	r3, [r7, #7]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d105      	bne.n	8007992 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007986:	683a      	ldr	r2, [r7, #0]
 8007988:	4907      	ldr	r1, [pc, #28]	; (80079a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800798a:	4808      	ldr	r0, [pc, #32]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800798c:	f7ff fe86 	bl	800769c <USBD_GetString>
 8007990:	e004      	b.n	800799c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	4904      	ldr	r1, [pc, #16]	; (80079a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007996:	4805      	ldr	r0, [pc, #20]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007998:	f7ff fe80 	bl	800769c <USBD_GetString>
  }
  return USBD_StrDesc;
 800799c:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3708      	adds	r7, #8
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	200004d0 	.word	0x200004d0
 80079ac:	08008038 	.word	0x08008038

080079b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079b6:	4b0f      	ldr	r3, [pc, #60]	; (80079f4 <Get_SerialNum+0x44>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079bc:	4b0e      	ldr	r3, [pc, #56]	; (80079f8 <Get_SerialNum+0x48>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079c2:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <Get_SerialNum+0x4c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4413      	add	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079d6:	2208      	movs	r2, #8
 80079d8:	4909      	ldr	r1, [pc, #36]	; (8007a00 <Get_SerialNum+0x50>)
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f000 f814 	bl	8007a08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079e0:	2204      	movs	r2, #4
 80079e2:	4908      	ldr	r1, [pc, #32]	; (8007a04 <Get_SerialNum+0x54>)
 80079e4:	68b8      	ldr	r0, [r7, #8]
 80079e6:	f000 f80f 	bl	8007a08 <IntToUnicode>
  }
}
 80079ea:	bf00      	nop
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	1ffff7e8 	.word	0x1ffff7e8
 80079f8:	1ffff7ec 	.word	0x1ffff7ec
 80079fc:	1ffff7f0 	.word	0x1ffff7f0
 8007a00:	2000014a 	.word	0x2000014a
 8007a04:	2000015a 	.word	0x2000015a

08007a08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	4613      	mov	r3, r2
 8007a14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]
 8007a1e:	e027      	b.n	8007a70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	0f1b      	lsrs	r3, r3, #28
 8007a24:	2b09      	cmp	r3, #9
 8007a26:	d80b      	bhi.n	8007a40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	0f1b      	lsrs	r3, r3, #28
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	4619      	mov	r1, r3
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	440b      	add	r3, r1
 8007a38:	3230      	adds	r2, #48	; 0x30
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	e00a      	b.n	8007a56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	0f1b      	lsrs	r3, r3, #28
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	7dfb      	ldrb	r3, [r7, #23]
 8007a48:	005b      	lsls	r3, r3, #1
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	440b      	add	r3, r1
 8007a50:	3237      	adds	r2, #55	; 0x37
 8007a52:	b2d2      	uxtb	r2, r2
 8007a54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a5c:	7dfb      	ldrb	r3, [r7, #23]
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	3301      	adds	r3, #1
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	4413      	add	r3, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	75fb      	strb	r3, [r7, #23]
 8007a70:	7dfa      	ldrb	r2, [r7, #23]
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d3d3      	bcc.n	8007a20 <IntToUnicode+0x18>
  }
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	371c      	adds	r7, #28
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr

08007a84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a0d      	ldr	r2, [pc, #52]	; (8007ac8 <HAL_PCD_MspInit+0x44>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d113      	bne.n	8007abe <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a96:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <HAL_PCD_MspInit+0x48>)
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	4a0c      	ldr	r2, [pc, #48]	; (8007acc <HAL_PCD_MspInit+0x48>)
 8007a9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007aa0:	61d3      	str	r3, [r2, #28]
 8007aa2:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <HAL_PCD_MspInit+0x48>)
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007aae:	2200      	movs	r2, #0
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	2014      	movs	r0, #20
 8007ab4:	f7f9 fb1d 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007ab8:	2014      	movs	r0, #20
 8007aba:	f7f9 fb36 	bl	800112a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007abe:	bf00      	nop
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40005c00 	.word	0x40005c00
 8007acc:	40021000 	.word	0x40021000

08007ad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4610      	mov	r0, r2
 8007ae8:	f7fe fea8 	bl	800683c <USBD_LL_SetupStage>
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007b06:	78fa      	ldrb	r2, [r7, #3]
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	440b      	add	r3, r1
 8007b14:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	78fb      	ldrb	r3, [r7, #3]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	f7fe feda 	bl	80068d6 <USBD_LL_DataOutStage>
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	460b      	mov	r3, r1
 8007b34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007b3c:	78fa      	ldrb	r2, [r7, #3]
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	4613      	mov	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	440b      	add	r3, r1
 8007b4a:	333c      	adds	r3, #60	; 0x3c
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	78fb      	ldrb	r3, [r7, #3]
 8007b50:	4619      	mov	r1, r3
 8007b52:	f7fe ff31 	bl	80069b8 <USBD_LL_DataInStage>
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff f841 	bl	8006bf4 <USBD_LL_SOF>
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b82:	2301      	movs	r3, #1
 8007b84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	d001      	beq.n	8007b92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b8e:	f7f8 fca3 	bl	80004d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007b98:	7bfa      	ldrb	r2, [r7, #15]
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fe fff1 	bl	8006b84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe ffaa 	bl	8006b02 <USBD_LL_Reset>
}
 8007bae:	bf00      	nop
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe ffeb 	bl	8006ba2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bd4:	4b04      	ldr	r3, [pc, #16]	; (8007be8 <HAL_PCD_SuspendCallback+0x30>)
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	4a03      	ldr	r2, [pc, #12]	; (8007be8 <HAL_PCD_SuspendCallback+0x30>)
 8007bda:	f043 0306 	orr.w	r3, r3, #6
 8007bde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007be0:	bf00      	nop
 8007be2:	3708      	adds	r7, #8
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	e000ed00 	.word	0xe000ed00

08007bec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe ffe5 	bl	8006bca <USBD_LL_Resume>
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007c10:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <USBD_LL_Init+0x88>)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a1d      	ldr	r2, [pc, #116]	; (8007c90 <USBD_LL_Init+0x88>)
 8007c1c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007c20:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <USBD_LL_Init+0x88>)
 8007c22:	4a1c      	ldr	r2, [pc, #112]	; (8007c94 <USBD_LL_Init+0x8c>)
 8007c24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007c26:	4b1a      	ldr	r3, [pc, #104]	; (8007c90 <USBD_LL_Init+0x88>)
 8007c28:	2208      	movs	r2, #8
 8007c2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007c2c:	4b18      	ldr	r3, [pc, #96]	; (8007c90 <USBD_LL_Init+0x88>)
 8007c2e:	2202      	movs	r2, #2
 8007c30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007c32:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <USBD_LL_Init+0x88>)
 8007c34:	2200      	movs	r2, #0
 8007c36:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007c38:	4b15      	ldr	r3, [pc, #84]	; (8007c90 <USBD_LL_Init+0x88>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007c3e:	4b14      	ldr	r3, [pc, #80]	; (8007c90 <USBD_LL_Init+0x88>)
 8007c40:	2200      	movs	r2, #0
 8007c42:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007c44:	4812      	ldr	r0, [pc, #72]	; (8007c90 <USBD_LL_Init+0x88>)
 8007c46:	f7f9 fe2c 	bl	80018a2 <HAL_PCD_Init>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007c50:	f7f8 fc42 	bl	80004d8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c5a:	2318      	movs	r3, #24
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2100      	movs	r1, #0
 8007c60:	f7fb fb34 	bl	80032cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c6a:	2358      	movs	r3, #88	; 0x58
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2180      	movs	r1, #128	; 0x80
 8007c70:	f7fb fb2c 	bl	80032cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c7e:	2200      	movs	r2, #0
 8007c80:	2181      	movs	r1, #129	; 0x81
 8007c82:	f7fb fb23 	bl	80032cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	200006d0 	.word	0x200006d0
 8007c94:	40005c00 	.word	0x40005c00

08007c98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7f9 fef6 	bl	8001aa0 <HAL_PCD_Start>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 f93c 	bl	8007f38 <USBD_Get_USB_Status>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b084      	sub	sp, #16
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	4608      	mov	r0, r1
 8007cd8:	4611      	mov	r1, r2
 8007cda:	461a      	mov	r2, r3
 8007cdc:	4603      	mov	r3, r0
 8007cde:	70fb      	strb	r3, [r7, #3]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70bb      	strb	r3, [r7, #2]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007cf6:	78bb      	ldrb	r3, [r7, #2]
 8007cf8:	883a      	ldrh	r2, [r7, #0]
 8007cfa:	78f9      	ldrb	r1, [r7, #3]
 8007cfc:	f7fa f84b 	bl	8001d96 <HAL_PCD_EP_Open>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 f916 	bl	8007f38 <USBD_Get_USB_Status>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d34:	78fa      	ldrb	r2, [r7, #3]
 8007d36:	4611      	mov	r1, r2
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fa f889 	bl	8001e50 <HAL_PCD_EP_Close>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d42:	7bfb      	ldrb	r3, [r7, #15]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f000 f8f7 	bl	8007f38 <USBD_Get_USB_Status>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	460b      	mov	r3, r1
 8007d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d72:	78fa      	ldrb	r2, [r7, #3]
 8007d74:	4611      	mov	r1, r2
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fa f91a 	bl	8001fb0 <HAL_PCD_EP_SetStall>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 f8d8 	bl	8007f38 <USBD_Get_USB_Status>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b084      	sub	sp, #16
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	460b      	mov	r3, r1
 8007da0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007db0:	78fa      	ldrb	r2, [r7, #3]
 8007db2:	4611      	mov	r1, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fa f95b 	bl	8002070 <HAL_PCD_EP_ClrStall>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 f8b9 	bl	8007f38 <USBD_Get_USB_Status>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007de6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	da0c      	bge.n	8007e0a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007df0:	78fb      	ldrb	r3, [r7, #3]
 8007df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df6:	68f9      	ldr	r1, [r7, #12]
 8007df8:	1c5a      	adds	r2, r3, #1
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	00db      	lsls	r3, r3, #3
 8007e02:	440b      	add	r3, r1
 8007e04:	3302      	adds	r3, #2
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	e00b      	b.n	8007e22 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e10:	68f9      	ldr	r1, [r7, #12]
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	440b      	add	r3, r1
 8007e1c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007e20:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr

08007e2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e46:	78fa      	ldrb	r2, [r7, #3]
 8007e48:	4611      	mov	r1, r2
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7f9 ff7e 	bl	8001d4c <HAL_PCD_SetAddress>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f000 f86e 	bl	8007f38 <USBD_Get_USB_Status>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b086      	sub	sp, #24
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	60f8      	str	r0, [r7, #12]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	461a      	mov	r2, r3
 8007e76:	460b      	mov	r3, r1
 8007e78:	72fb      	strb	r3, [r7, #11]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e8c:	893b      	ldrh	r3, [r7, #8]
 8007e8e:	7af9      	ldrb	r1, [r7, #11]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	f7fa f856 	bl	8001f42 <HAL_PCD_EP_Transmit>
 8007e96:	4603      	mov	r3, r0
 8007e98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 f84b 	bl	8007f38 <USBD_Get_USB_Status>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ea6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b086      	sub	sp, #24
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	607a      	str	r2, [r7, #4]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	72fb      	strb	r3, [r7, #11]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ed2:	893b      	ldrh	r3, [r7, #8]
 8007ed4:	7af9      	ldrb	r1, [r7, #11]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	f7fa f802 	bl	8001ee0 <HAL_PCD_EP_Receive>
 8007edc:	4603      	mov	r3, r0
 8007ede:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee0:	7dfb      	ldrb	r3, [r7, #23]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 f828 	bl	8007f38 <USBD_Get_USB_Status>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007eec:	7dbb      	ldrb	r3, [r7, #22]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3718      	adds	r7, #24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f00:	4b02      	ldr	r3, [pc, #8]	; (8007f0c <USBD_static_malloc+0x14>)
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr
 8007f0c:	200009c0 	.word	0x200009c0

08007f10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]

}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bc80      	pop	{r7}
 8007f20:	4770      	bx	lr

08007f22 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f22:	b480      	push	{r7}
 8007f24:	b083      	sub	sp, #12
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bc80      	pop	{r7}
 8007f36:	4770      	bx	lr

08007f38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d817      	bhi.n	8007f7c <USBD_Get_USB_Status+0x44>
 8007f4c:	a201      	add	r2, pc, #4	; (adr r2, 8007f54 <USBD_Get_USB_Status+0x1c>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f65 	.word	0x08007f65
 8007f58:	08007f6b 	.word	0x08007f6b
 8007f5c:	08007f71 	.word	0x08007f71
 8007f60:	08007f77 	.word	0x08007f77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f64:	2300      	movs	r3, #0
 8007f66:	73fb      	strb	r3, [r7, #15]
    break;
 8007f68:	e00b      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f6e:	e008      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007f70:	2301      	movs	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
    break;
 8007f74:	e005      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007f76:	2302      	movs	r3, #2
 8007f78:	73fb      	strb	r3, [r7, #15]
    break;
 8007f7a:	e002      	b.n	8007f82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007f80:	bf00      	nop
  }
  return usb_status;
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3714      	adds	r7, #20
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bc80      	pop	{r7}
 8007f8c:	4770      	bx	lr
 8007f8e:	bf00      	nop

08007f90 <memset>:
 8007f90:	4603      	mov	r3, r0
 8007f92:	4402      	add	r2, r0
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d100      	bne.n	8007f9a <memset+0xa>
 8007f98:	4770      	bx	lr
 8007f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f9e:	e7f9      	b.n	8007f94 <memset+0x4>

08007fa0 <__libc_init_array>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	2600      	movs	r6, #0
 8007fa4:	4d0c      	ldr	r5, [pc, #48]	; (8007fd8 <__libc_init_array+0x38>)
 8007fa6:	4c0d      	ldr	r4, [pc, #52]	; (8007fdc <__libc_init_array+0x3c>)
 8007fa8:	1b64      	subs	r4, r4, r5
 8007faa:	10a4      	asrs	r4, r4, #2
 8007fac:	42a6      	cmp	r6, r4
 8007fae:	d109      	bne.n	8007fc4 <__libc_init_array+0x24>
 8007fb0:	f000 f81a 	bl	8007fe8 <_init>
 8007fb4:	2600      	movs	r6, #0
 8007fb6:	4d0a      	ldr	r5, [pc, #40]	; (8007fe0 <__libc_init_array+0x40>)
 8007fb8:	4c0a      	ldr	r4, [pc, #40]	; (8007fe4 <__libc_init_array+0x44>)
 8007fba:	1b64      	subs	r4, r4, r5
 8007fbc:	10a4      	asrs	r4, r4, #2
 8007fbe:	42a6      	cmp	r6, r4
 8007fc0:	d105      	bne.n	8007fce <__libc_init_array+0x2e>
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fc8:	4798      	blx	r3
 8007fca:	3601      	adds	r6, #1
 8007fcc:	e7ee      	b.n	8007fac <__libc_init_array+0xc>
 8007fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd2:	4798      	blx	r3
 8007fd4:	3601      	adds	r6, #1
 8007fd6:	e7f2      	b.n	8007fbe <__libc_init_array+0x1e>
 8007fd8:	0800806c 	.word	0x0800806c
 8007fdc:	0800806c 	.word	0x0800806c
 8007fe0:	0800806c 	.word	0x0800806c
 8007fe4:	08008070 	.word	0x08008070

08007fe8 <_init>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr

08007ff4 <_fini>:
 8007ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff6:	bf00      	nop
 8007ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ffa:	bc08      	pop	{r3}
 8007ffc:	469e      	mov	lr, r3
 8007ffe:	4770      	bx	lr
